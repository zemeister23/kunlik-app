{"version":3,"file":"react-query-core.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/inheritsLoose.js","../src/core/subscribable.ts","../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/focusManager.ts","../src/core/onlineManager.ts","../src/core/retryer.ts","../src/core/notifyManager.ts","../src/core/logger.ts","../src/core/query.ts","../src/core/queryCache.ts","../src/core/mutation.ts","../src/core/mutationCache.ts","../src/core/infiniteQueryBehavior.ts","../src/core/queryClient.ts","../src/core/queryObserver.ts","../src/core/queriesObserver.ts","../src/core/infiniteQueryObserver.ts","../src/core/mutationObserver.ts"],"sourcesContent":["export default function _inheritsLoose(subClass, superClass) {\n  subClass.prototype = Object.create(superClass.prototype);\n  subClass.prototype.constructor = subClass;\n  subClass.__proto__ = superClass;\n}","type Listener = () => void\n\nexport class Subscribable<TListener extends Function = Listener> {\n  protected listeners: TListener[]\n\n  constructor() {\n    this.listeners = []\n  }\n\n  subscribe(listener?: TListener): () => void {\n    const callback = listener || (() => undefined)\n\n    this.listeners.push(callback as TListener)\n\n    this.onSubscribe()\n\n    return () => {\n      this.listeners = this.listeners.filter(x => x !== callback)\n      this.onUnsubscribe()\n    }\n  }\n\n  hasListeners(): boolean {\n    return this.listeners.length > 0\n  }\n\n  protected onSubscribe(): void {\n    // Do nothing\n  }\n\n  protected onUnsubscribe(): void {\n    // Do nothing\n  }\n}\n","export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = Array.isArray(queryKey) ? queryKey : [queryKey]\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass FocusManager extends Subscribable {\n  private focused?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setFocused: (focused?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((focused) => {\n      if (typeof focused === 'boolean') {\n        this.setFocused(focused)\n      } else {\n        this.onFocus()\n      }\n    })\n  }\n\n  setFocused(focused?: boolean): void {\n    this.focused = focused\n\n    if (focused) {\n      this.onFocus()\n    }\n  }\n\n  onFocus(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isFocused(): boolean {\n    if (typeof this.focused === 'boolean') {\n      return this.focused\n    }\n\n    // document global can be unavailable in react native\n    if (typeof document === 'undefined') {\n      return true\n    }\n\n    return [undefined, 'visible', 'prerender'].includes(\n      document.visibilityState\n    )\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onFocus => {\n        const listener = () => onFocus()\n        // Listen to visibillitychange and focus\n        window.addEventListener('visibilitychange', listener, false)\n        window.addEventListener('focus', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('visibilitychange', listener)\n          window.removeEventListener('focus', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const focusManager = new FocusManager()\n","import { Subscribable } from './subscribable'\nimport { isServer } from './utils'\n\nclass OnlineManager extends Subscribable {\n  private online?: boolean\n  private removeEventListener?: () => void\n\n  protected onSubscribe(): void {\n    if (!this.removeEventListener) {\n      this.setDefaultEventListener()\n    }\n  }\n\n  setEventListener(\n    setup: (setOnline: (online?: boolean) => void) => () => void\n  ): void {\n    if (this.removeEventListener) {\n      this.removeEventListener()\n    }\n    this.removeEventListener = setup((online?: boolean) => {\n      if (typeof online === 'boolean') {\n        this.setOnline(online)\n      } else {\n        this.onOnline()\n      }\n    })\n  }\n\n  setOnline(online?: boolean): void {\n    this.online = online\n\n    if (online) {\n      this.onOnline()\n    }\n  }\n\n  onOnline(): void {\n    this.listeners.forEach(listener => {\n      listener()\n    })\n  }\n\n  isOnline(): boolean {\n    if (typeof this.online === 'boolean') {\n      return this.online\n    }\n\n    if (\n      typeof navigator === 'undefined' ||\n      typeof navigator.onLine === 'undefined'\n    ) {\n      return true\n    }\n\n    return navigator.onLine\n  }\n\n  private setDefaultEventListener() {\n    if (!isServer && window?.addEventListener) {\n      this.setEventListener(onOnline => {\n        const listener = () => onOnline()\n        // Listen to online\n        window.addEventListener('online', listener, false)\n        window.addEventListener('offline', listener, false)\n\n        return () => {\n          // Be sure to unsubscribe if a new handler is set\n          window.removeEventListener('online', listener)\n          window.removeEventListener('offline', listener)\n        }\n      })\n    }\n  }\n}\n\nexport const onlineManager = new OnlineManager()\n","import { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { sleep } from './utils'\n\n// TYPES\n\ninterface RetryerConfig<TData = unknown, TError = unknown> {\n  fn: () => TData | Promise<TData>\n  onError?: (error: TError) => void\n  onSuccess?: (data: TData) => void\n  onFail?: (failureCount: number, error: TError) => void\n  onPause?: () => void\n  onContinue?: () => void\n  retry?: RetryValue<TError>\n  retryDelay?: RetryDelayValue<TError>\n}\n\nexport type RetryValue<TError> = boolean | number | ShouldRetryFunction<TError>\n\ntype ShouldRetryFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => boolean\n\nexport type RetryDelayValue<TError> = number | RetryDelayFunction<TError>\n\ntype RetryDelayFunction<TError = unknown> = (\n  failureCount: number,\n  error: TError\n) => number\n\nfunction defaultRetryDelay(failureCount: number) {\n  return Math.min(1000 * 2 ** failureCount, 30000)\n}\n\ninterface Cancelable {\n  cancel(): void\n}\n\nexport function isCancelable(value: any): value is Cancelable {\n  return typeof value?.cancel === 'function'\n}\n\nexport interface CancelOptions {\n  revert?: boolean\n  silent?: boolean\n}\n\nexport class CancelledError {\n  revert?: boolean\n  silent?: boolean\n  constructor(options?: CancelOptions) {\n    this.revert = options?.revert\n    this.silent = options?.silent\n  }\n}\n\nexport function isCancelledError(value: any): value is CancelledError {\n  return value instanceof CancelledError\n}\n\n// CLASS\n\nexport class Retryer<TData = unknown, TError = unknown> {\n  cancel: (options?: CancelOptions) => void\n  cancelRetry: () => void\n  continue: () => void\n  failureCount: number\n  isPaused: boolean\n  isResolved: boolean\n  isTransportCancelable: boolean\n  promise: Promise<TData>\n\n  constructor(config: RetryerConfig<TData, TError>) {\n    let cancelRetry = false\n    let cancelFn: ((options?: CancelOptions) => void) | undefined\n    let continueFn: ((value?: unknown) => void) | undefined\n    let promiseResolve: (data: TData) => void\n    let promiseReject: (error: TError) => void\n\n    this.cancel = cancelOptions => cancelFn?.(cancelOptions)\n    this.cancelRetry = () => {\n      cancelRetry = true\n    }\n    this.continue = () => continueFn?.()\n    this.failureCount = 0\n    this.isPaused = false\n    this.isResolved = false\n    this.isTransportCancelable = false\n    this.promise = new Promise<TData>((outerResolve, outerReject) => {\n      promiseResolve = outerResolve\n      promiseReject = outerReject\n    })\n\n    const resolve = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onSuccess?.(value)\n        continueFn?.()\n        promiseResolve(value)\n      }\n    }\n\n    const reject = (value: any) => {\n      if (!this.isResolved) {\n        this.isResolved = true\n        config.onError?.(value)\n        continueFn?.()\n        promiseReject(value)\n      }\n    }\n\n    const pause = () => {\n      return new Promise(continueResolve => {\n        continueFn = continueResolve\n        this.isPaused = true\n        config.onPause?.()\n      }).then(() => {\n        continueFn = undefined\n        this.isPaused = false\n        config.onContinue?.()\n      })\n    }\n\n    // Create loop function\n    const run = () => {\n      // Do nothing if already resolved\n      if (this.isResolved) {\n        return\n      }\n\n      let promiseOrValue: any\n\n      // Execute query\n      try {\n        promiseOrValue = config.fn()\n      } catch (error) {\n        promiseOrValue = Promise.reject(error)\n      }\n\n      // Create callback to cancel this fetch\n      cancelFn = cancelOptions => {\n        if (!this.isResolved) {\n          reject(new CancelledError(cancelOptions))\n\n          // Cancel transport if supported\n          if (isCancelable(promiseOrValue)) {\n            try {\n              promiseOrValue.cancel()\n            } catch {}\n          }\n        }\n      }\n\n      // Check if the transport layer support cancellation\n      this.isTransportCancelable = isCancelable(promiseOrValue)\n\n      Promise.resolve(promiseOrValue)\n        .then(resolve)\n        .catch(error => {\n          // Stop if the fetch is already resolved\n          if (this.isResolved) {\n            return\n          }\n\n          // Do we need to retry the request?\n          const retry = config.retry ?? 3\n          const retryDelay = config.retryDelay ?? defaultRetryDelay\n          const delay =\n            typeof retryDelay === 'function'\n              ? retryDelay(this.failureCount, error)\n              : retryDelay\n          const shouldRetry =\n            retry === true ||\n            (typeof retry === 'number' && this.failureCount < retry) ||\n            (typeof retry === 'function' && retry(this.failureCount, error))\n\n          if (cancelRetry || !shouldRetry) {\n            // We are done if the query does not need to be retried\n            reject(error)\n            return\n          }\n\n          this.failureCount++\n\n          // Notify on fail\n          config.onFail?.(this.failureCount, error)\n\n          // Delay\n          sleep(delay)\n            // Pause if the document is not visible or when the device is offline\n            .then(() => {\n              if (!focusManager.isFocused() || !onlineManager.isOnline()) {\n                return pause()\n              }\n            })\n            .then(() => {\n              if (cancelRetry) {\n                reject(error)\n              } else {\n                run()\n              }\n            })\n        })\n    }\n\n    // Start loop\n    run()\n  }\n}\n","import { scheduleMicrotask } from './utils'\n\n// TYPES\n\ntype NotifyCallback = () => void\n\ntype NotifyFunction = (callback: () => void) => void\n\ntype BatchNotifyFunction = (callback: () => void) => void\n\n// CLASS\n\nclass NotifyManager {\n  private queue: NotifyCallback[]\n  private transactions: number\n  private notifyFn: NotifyFunction\n  private batchNotifyFn: BatchNotifyFunction\n\n  constructor() {\n    this.queue = []\n    this.transactions = 0\n\n    this.notifyFn = (callback: () => void) => {\n      callback()\n    }\n\n    this.batchNotifyFn = (callback: () => void) => {\n      callback()\n    }\n  }\n\n  batch<T>(callback: () => T): T {\n    this.transactions++\n    const result = callback()\n    this.transactions--\n    if (!this.transactions) {\n      this.flush()\n    }\n    return result\n  }\n\n  schedule(callback: NotifyCallback): void {\n    if (this.transactions) {\n      this.queue.push(callback)\n    } else {\n      scheduleMicrotask(() => {\n        this.notifyFn(callback)\n      })\n    }\n  }\n\n  /**\n   * All calls to the wrapped function will be batched.\n   */\n  batchCalls<T extends Function>(callback: T): T {\n    return ((...args: any[]) => {\n      this.schedule(() => {\n        callback(...args)\n      })\n    }) as any\n  }\n\n  flush(): void {\n    const queue = this.queue\n    this.queue = []\n    if (queue.length) {\n      scheduleMicrotask(() => {\n        this.batchNotifyFn(() => {\n          queue.forEach(callback => {\n            this.notifyFn(callback)\n          })\n        })\n      })\n    }\n  }\n\n  /**\n   * Use this method to set a custom notify function.\n   * This can be used to for example wrap notifications with `React.act` while running tests.\n   */\n  setNotifyFunction(fn: NotifyFunction) {\n    this.notifyFn = fn\n  }\n\n  /**\n   * Use this method to set a custom function to batch notifications together into a single tick.\n   * By default React Query will use the batch function provided by ReactDOM or React Native.\n   */\n  setBatchNotifyFunction(fn: BatchNotifyFunction) {\n    this.batchNotifyFn = fn\n  }\n}\n\n// SINGLETON\n\nexport const notifyManager = new NotifyManager()\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import {\n  Updater,\n  functionalUpdate,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  timeUntilStale,\n} from './utils'\nimport type {\n  InitialDataFunction,\n  QueryKey,\n  QueryOptions,\n  QueryStatus,\n  QueryFunctionContext,\n} from './types'\nimport type { QueryCache } from './queryCache'\nimport type { QueryObserver } from './queryObserver'\nimport { notifyManager } from './notifyManager'\nimport { getLogger } from './logger'\nimport { Retryer, CancelOptions, isCancelledError } from './retryer'\n\n// TYPES\n\ninterface QueryConfig<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  cache: QueryCache\n  queryKey: TQueryKey\n  queryHash: string\n  options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  state?: QueryState<TData, TError>\n}\n\nexport interface QueryState<TData = unknown, TError = unknown> {\n  data: TData | undefined\n  dataUpdateCount: number\n  dataUpdatedAt: number\n  error: TError | null\n  errorUpdateCount: number\n  errorUpdatedAt: number\n  fetchFailureCount: number\n  fetchMeta: any\n  isFetching: boolean\n  isInvalidated: boolean\n  isPaused: boolean\n  status: QueryStatus\n}\n\nexport interface FetchContext<\n  TQueryFnData,\n  TError,\n  TData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  fetchFn: () => unknown | Promise<unknown>\n  fetchOptions?: FetchOptions\n  options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  queryKey: TQueryKey\n  state: QueryState<TData, TError>\n}\n\nexport interface QueryBehavior<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  onFetch: (\n    context: FetchContext<TQueryFnData, TError, TData, TQueryKey>\n  ) => void\n}\n\nexport interface FetchOptions {\n  cancelRefetch?: boolean\n  meta?: any\n}\n\nexport interface SetDataOptions {\n  updatedAt?: number\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface FetchAction {\n  type: 'fetch'\n  meta?: any\n}\n\ninterface SuccessAction<TData> {\n  data: TData | undefined\n  type: 'success'\n  dataUpdatedAt?: number\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface InvalidateAction {\n  type: 'invalidate'\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError> {\n  type: 'setState'\n  state: QueryState<TData, TError>\n  setStateOptions?: SetStateOptions\n}\n\nexport type Action<TData, TError> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | FetchAction\n  | InvalidateAction\n  | PauseAction\n  | SetStateAction<TData, TError>\n  | SuccessAction<TData>\n\nexport interface SetStateOptions {\n  meta?: any\n}\n\n// CLASS\n\nexport class Query<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> {\n  queryKey: TQueryKey\n  queryHash: string\n  options!: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  initialState: QueryState<TData, TError>\n  revertState?: QueryState<TData, TError>\n  state: QueryState<TData, TError>\n  cacheTime!: number\n\n  private cache: QueryCache\n  private promise?: Promise<TData>\n  private gcTimeout?: number\n  private retryer?: Retryer<TData, TError>\n  private observers: QueryObserver<any, any, any, any, any>[]\n  private defaultOptions?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n\n  constructor(config: QueryConfig<TQueryFnData, TError, TData, TQueryKey>) {\n    this.defaultOptions = config.defaultOptions\n    this.setOptions(config.options)\n    this.observers = []\n    this.cache = config.cache\n    this.queryKey = config.queryKey\n    this.queryHash = config.queryHash\n    this.initialState = config.state || this.getDefaultState(this.options)\n    this.state = this.initialState\n    this.scheduleGc()\n  }\n\n  private setOptions(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.options = { ...this.defaultOptions, ...options }\n\n    // Default to 5 minutes if not cache time is set\n    this.cacheTime = Math.max(\n      this.cacheTime || 0,\n      this.options.cacheTime ?? 5 * 60 * 1000\n    )\n  }\n\n  setDefaultOptions(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): void {\n    this.defaultOptions = options\n  }\n\n  private scheduleGc(): void {\n    this.clearGcTimeout()\n\n    if (isValidTimeout(this.cacheTime)) {\n      this.gcTimeout = setTimeout(() => {\n        this.optionalRemove()\n      }, this.cacheTime)\n    }\n  }\n\n  private clearGcTimeout() {\n    clearTimeout(this.gcTimeout)\n    this.gcTimeout = undefined\n  }\n\n  private optionalRemove() {\n    if (!this.observers.length && !this.state.isFetching) {\n      this.cache.remove(this)\n    }\n  }\n\n  setData(\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const prevData = this.state.data\n\n    // Get the new data\n    let data = functionalUpdate(updater, prevData)\n\n    // Use prev data if an isDataEqual function is defined and returns `true`\n    if (this.options.isDataEqual?.(prevData, data)) {\n      data = prevData as TData\n    } else if (this.options.structuralSharing !== false) {\n      // Structurally share data between prev and new data if needed\n      data = replaceEqualDeep(prevData, data)\n    }\n\n    // Set data and mark it as cached\n    this.dispatch({\n      data,\n      type: 'success',\n      dataUpdatedAt: options?.updatedAt,\n    })\n\n    return data\n  }\n\n  setState(\n    state: QueryState<TData, TError>,\n    setStateOptions?: SetStateOptions\n  ): void {\n    this.dispatch({ type: 'setState', state, setStateOptions })\n  }\n\n  cancel(options?: CancelOptions): Promise<void> {\n    const promise = this.promise\n    this.retryer?.cancel(options)\n    return promise ? promise.then(noop).catch(noop) : Promise.resolve()\n  }\n\n  destroy(): void {\n    this.clearGcTimeout()\n    this.cancel({ silent: true })\n  }\n\n  reset(): void {\n    this.destroy()\n    this.setState(this.initialState)\n  }\n\n  isActive(): boolean {\n    return this.observers.some(observer => observer.options.enabled !== false)\n  }\n\n  isFetching(): boolean {\n    return this.state.isFetching\n  }\n\n  isStale(): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      this.observers.some(observer => observer.getCurrentResult().isStale)\n    )\n  }\n\n  isStaleByTime(staleTime = 0): boolean {\n    return (\n      this.state.isInvalidated ||\n      !this.state.dataUpdatedAt ||\n      !timeUntilStale(this.state.dataUpdatedAt, staleTime)\n    )\n  }\n\n  onFocus(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnWindowFocus())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  onOnline(): void {\n    const observer = this.observers.find(x => x.shouldFetchOnReconnect())\n\n    if (observer) {\n      observer.refetch()\n    }\n\n    // Continue fetch if currently paused\n    this.retryer?.continue()\n  }\n\n  addObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n\n      // Stop the query from being garbage collected\n      this.clearGcTimeout()\n\n      this.cache.notify({ type: 'observerAdded', query: this, observer })\n    }\n  }\n\n  removeObserver(observer: QueryObserver<any, any, any, any, any>): void {\n    if (this.observers.indexOf(observer) !== -1) {\n      this.observers = this.observers.filter(x => x !== observer)\n\n      if (!this.observers.length) {\n        // If the transport layer does not support cancellation\n        // we'll let the query continue so the result can be cached\n        if (this.retryer) {\n          if (this.retryer.isTransportCancelable) {\n            this.retryer.cancel({ revert: true })\n          } else {\n            this.retryer.cancelRetry()\n          }\n        }\n\n        if (this.cacheTime) {\n          this.scheduleGc()\n        } else {\n          this.cache.remove(this)\n        }\n      }\n\n      this.cache.notify({ type: 'observerRemoved', query: this, observer })\n    }\n  }\n\n  invalidate(): void {\n    if (!this.state.isInvalidated) {\n      this.dispatch({ type: 'invalidate' })\n    }\n  }\n\n  fetch(\n    options?: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    fetchOptions?: FetchOptions\n  ): Promise<TData> {\n    if (this.state.isFetching) {\n      if (this.state.dataUpdatedAt && fetchOptions?.cancelRefetch) {\n        // Silently cancel current fetch if the user wants to cancel refetches\n        this.cancel({ silent: true })\n      } else if (this.promise) {\n        // Return current promise if we are already fetching\n        return this.promise\n      }\n    }\n\n    // Update config if passed, otherwise the config from the last execution is used\n    if (options) {\n      this.setOptions(options)\n    }\n\n    // Use the options from the first observer with a query function if no function is found.\n    // This can happen when the query is hydrated or created with setQueryData.\n    if (!this.options.queryFn) {\n      const observer = this.observers.find(x => x.options.queryFn)\n      if (observer) {\n        this.setOptions(observer.options)\n      }\n    }\n\n    // Create query function context\n    const queryFnContext: QueryFunctionContext<TQueryKey> = {\n      queryKey: this.queryKey,\n      pageParam: undefined,\n    }\n\n    // Create fetch function\n    const fetchFn = () =>\n      this.options.queryFn\n        ? this.options.queryFn(queryFnContext)\n        : Promise.reject('Missing queryFn')\n\n    // Trigger behavior hook\n    const context: FetchContext<TQueryFnData, TError, TData, any> = {\n      fetchOptions,\n      options: this.options,\n      queryKey: this.queryKey,\n      state: this.state,\n      fetchFn,\n    }\n\n    if (this.options.behavior?.onFetch) {\n      this.options.behavior?.onFetch(context)\n    }\n\n    // Store state in case the current fetch needs to be reverted\n    this.revertState = this.state\n\n    // Set to fetching state if not already in it\n    if (\n      !this.state.isFetching ||\n      this.state.fetchMeta !== context.fetchOptions?.meta\n    ) {\n      this.dispatch({ type: 'fetch', meta: context.fetchOptions?.meta })\n    }\n\n    // Try to fetch the data\n    this.retryer = new Retryer({\n      fn: context.fetchFn as () => TData,\n      onSuccess: data => {\n        this.setData(data as TData)\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onError: (error: TError | { silent?: boolean }) => {\n        // Optimistically update state if needed\n        if (!(isCancelledError(error) && error.silent)) {\n          this.dispatch({\n            type: 'error',\n            error: error as TError,\n          })\n        }\n\n        if (!isCancelledError(error)) {\n          // Notify cache callback\n          if (this.cache.config.onError) {\n            this.cache.config.onError(error, this as Query<any, any, any, any>)\n          }\n\n          // Log error\n          getLogger().error(error)\n        }\n\n        // Remove query after fetching if cache time is 0\n        if (this.cacheTime === 0) {\n          this.optionalRemove()\n        }\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: context.options.retry,\n      retryDelay: context.options.retryDelay,\n    })\n\n    this.promise = this.retryer.promise\n\n    return this.promise\n  }\n\n  private dispatch(action: Action<TData, TError>): void {\n    this.state = this.reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onQueryUpdate(action)\n      })\n\n      this.cache.notify({ query: this, type: 'queryUpdated', action })\n    })\n  }\n\n  protected getDefaultState(\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): QueryState<TData, TError> {\n    const data =\n      typeof options.initialData === 'function'\n        ? (options.initialData as InitialDataFunction<TData>)()\n        : options.initialData\n\n    const hasInitialData = typeof options.initialData !== 'undefined'\n\n    const initialDataUpdatedAt = hasInitialData\n      ? typeof options.initialDataUpdatedAt === 'function'\n        ? (options.initialDataUpdatedAt as () => number | undefined)()\n        : options.initialDataUpdatedAt\n      : 0\n\n    const hasData = typeof data !== 'undefined'\n\n    return {\n      data,\n      dataUpdateCount: 0,\n      dataUpdatedAt: hasData ? initialDataUpdatedAt ?? Date.now() : 0,\n      error: null,\n      errorUpdateCount: 0,\n      errorUpdatedAt: 0,\n      fetchFailureCount: 0,\n      fetchMeta: null,\n      isFetching: false,\n      isInvalidated: false,\n      isPaused: false,\n      status: hasData ? 'success' : 'idle',\n    }\n  }\n\n  protected reducer(\n    state: QueryState<TData, TError>,\n    action: Action<TData, TError>\n  ): QueryState<TData, TError> {\n    switch (action.type) {\n      case 'failed':\n        return {\n          ...state,\n          fetchFailureCount: state.fetchFailureCount + 1,\n        }\n      case 'pause':\n        return {\n          ...state,\n          isPaused: true,\n        }\n      case 'continue':\n        return {\n          ...state,\n          isPaused: false,\n        }\n      case 'fetch':\n        return {\n          ...state,\n          fetchFailureCount: 0,\n          fetchMeta: action.meta ?? null,\n          isFetching: true,\n          isPaused: false,\n          status: !state.dataUpdatedAt ? 'loading' : state.status,\n        }\n      case 'success':\n        return {\n          ...state,\n          data: action.data,\n          dataUpdateCount: state.dataUpdateCount + 1,\n          dataUpdatedAt: action.dataUpdatedAt ?? Date.now(),\n          error: null,\n          fetchFailureCount: 0,\n          isFetching: false,\n          isInvalidated: false,\n          isPaused: false,\n          status: 'success',\n        }\n      case 'error':\n        const error = action.error as unknown\n\n        if (isCancelledError(error) && error.revert && this.revertState) {\n          return { ...this.revertState }\n        }\n\n        return {\n          ...state,\n          error: error as TError,\n          errorUpdateCount: state.errorUpdateCount + 1,\n          errorUpdatedAt: Date.now(),\n          fetchFailureCount: state.fetchFailureCount + 1,\n          isFetching: false,\n          isPaused: false,\n          status: 'error',\n        }\n      case 'invalidate':\n        return {\n          ...state,\n          isInvalidated: true,\n        }\n      case 'setState':\n        return {\n          ...state,\n          ...action.state,\n        }\n      default:\n        return state\n    }\n  }\n}\n","import {\n  QueryFilters,\n  hashQueryKeyByOptions,\n  matchQuery,\n  parseFilterArgs,\n} from './utils'\nimport { Action, Query, QueryState } from './query'\nimport type { QueryKey, QueryOptions } from './types'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport { QueryObserver } from './queryObserver'\n\n// TYPES\n\ninterface QueryCacheConfig {\n  onError?: (error: unknown, query: Query<unknown, unknown, unknown>) => void\n}\n\ninterface QueryHashMap {\n  [hash: string]: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryAdded {\n  type: 'queryAdded'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryRemoved {\n  type: 'queryRemoved'\n  query: Query<any, any, any, any>\n}\n\ninterface NotifyEventQueryUpdated {\n  type: 'queryUpdated'\n  query: Query<any, any, any, any>\n  action: Action<any, any>\n}\n\ninterface NotifyEventObserverAdded {\n  type: 'observerAdded'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverRemoved {\n  type: 'observerRemoved'\n  query: Query<any, any, any, any>\n  observer: QueryObserver<any, any, any, any, any>\n}\n\ninterface NotifyEventObserverResultsUpdated {\n  type: 'observerResultsUpdated'\n  query: Query<any, any, any, any>\n}\n\ntype QueryCacheNotifyEvent =\n  | NotifyEventQueryAdded\n  | NotifyEventQueryRemoved\n  | NotifyEventQueryUpdated\n  | NotifyEventObserverAdded\n  | NotifyEventObserverRemoved\n  | NotifyEventObserverResultsUpdated\n\ntype QueryCacheListener = (event?: QueryCacheNotifyEvent) => void\n\n// CLASS\n\nexport class QueryCache extends Subscribable<QueryCacheListener> {\n  config: QueryCacheConfig\n\n  private queries: Query<any, any, any, any>[]\n  private queriesMap: QueryHashMap\n\n  constructor(config?: QueryCacheConfig) {\n    super()\n    this.config = config || {}\n    this.queries = []\n    this.queriesMap = {}\n  }\n\n  build<TQueryFnData, TError, TData, TQueryKey extends QueryKey>(\n    client: QueryClient,\n    options: QueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    state?: QueryState<TData, TError>\n  ): Query<TQueryFnData, TError, TData, TQueryKey> {\n    const queryKey = options.queryKey!\n    const queryHash =\n      options.queryHash ?? hashQueryKeyByOptions(queryKey, options)\n    let query = this.get<TQueryFnData, TError, TData, TQueryKey>(queryHash)\n\n    if (!query) {\n      query = new Query({\n        cache: this,\n        queryKey,\n        queryHash,\n        options: client.defaultQueryOptions(options),\n        state,\n        defaultOptions: client.getQueryDefaults(queryKey),\n      })\n      this.add(query)\n    }\n\n    return query\n  }\n\n  add(query: Query<any, any, any, any>): void {\n    if (!this.queriesMap[query.queryHash]) {\n      this.queriesMap[query.queryHash] = query\n      this.queries.push(query)\n      this.notify({\n        type: 'queryAdded',\n        query,\n      })\n    }\n  }\n\n  remove(query: Query<any, any, any, any>): void {\n    const queryInMap = this.queriesMap[query.queryHash]\n\n    if (queryInMap) {\n      query.destroy()\n\n      this.queries = this.queries.filter(x => x !== query)\n\n      if (queryInMap === query) {\n        delete this.queriesMap[query.queryHash]\n      }\n\n      this.notify({ type: 'queryRemoved', query })\n    }\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        this.remove(query)\n      })\n    })\n  }\n\n  get<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueyKey extends QueryKey = QueryKey\n  >(\n    queryHash: string\n  ): Query<TQueryFnData, TError, TData, TQueyKey> | undefined {\n    return this.queriesMap[queryHash]\n  }\n\n  getAll(): Query[] {\n    return this.queries\n  }\n\n  find<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(\n    arg1: QueryKey,\n    arg2?: QueryFilters\n  ): Query<TQueryFnData, TError, TData> | undefined {\n    const [filters] = parseFilterArgs(arg1, arg2)\n\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.queries.find(query => matchQuery(filters, query))\n  }\n\n  findAll(queryKey?: QueryKey, filters?: QueryFilters): Query[]\n  findAll(filters?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[]\n  findAll(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): Query[] {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    return filters\n      ? this.queries.filter(query => matchQuery(filters, query))\n      : this.queries\n  }\n\n  notify(event: QueryCacheNotifyEvent) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(event)\n      })\n    })\n  }\n\n  onFocus(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onFocus()\n      })\n    })\n  }\n\n  onOnline(): void {\n    notifyManager.batch(() => {\n      this.queries.forEach(query => {\n        query.onOnline()\n      })\n    })\n  }\n}\n","import type { MutationOptions, MutationStatus } from './types'\nimport type { MutationCache } from './mutationCache'\nimport type { MutationObserver } from './mutationObserver'\nimport { getLogger } from './logger'\nimport { notifyManager } from './notifyManager'\nimport { Retryer } from './retryer'\nimport { noop } from './utils'\n\n// TYPES\n\ninterface MutationConfig<TData, TError, TVariables, TContext> {\n  mutationId: number\n  mutationCache: MutationCache\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  defaultOptions?: MutationOptions<TData, TError, TVariables, TContext>\n  state?: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport interface MutationState<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  context: TContext | undefined\n  data: TData | undefined\n  error: TError | null\n  failureCount: number\n  isPaused: boolean\n  status: MutationStatus\n  variables: TVariables | undefined\n}\n\ninterface FailedAction {\n  type: 'failed'\n}\n\ninterface LoadingAction<TVariables, TContext> {\n  type: 'loading'\n  variables?: TVariables\n  context?: TContext\n}\n\ninterface SuccessAction<TData> {\n  type: 'success'\n  data: TData\n}\n\ninterface ErrorAction<TError> {\n  type: 'error'\n  error: TError\n}\n\ninterface PauseAction {\n  type: 'pause'\n}\n\ninterface ContinueAction {\n  type: 'continue'\n}\n\ninterface SetStateAction<TData, TError, TVariables, TContext> {\n  type: 'setState'\n  state: MutationState<TData, TError, TVariables, TContext>\n}\n\nexport type Action<TData, TError, TVariables, TContext> =\n  | ContinueAction\n  | ErrorAction<TError>\n  | FailedAction\n  | LoadingAction<TVariables, TContext>\n  | PauseAction\n  | SetStateAction<TData, TError, TVariables, TContext>\n  | SuccessAction<TData>\n\n// CLASS\n\nexport class Mutation<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> {\n  state: MutationState<TData, TError, TVariables, TContext>\n  options: MutationOptions<TData, TError, TVariables, TContext>\n  mutationId: number\n\n  private observers: MutationObserver<TData, TError, TVariables, TContext>[]\n  private mutationCache: MutationCache\n  private retryer?: Retryer<TData, TError>\n\n  constructor(config: MutationConfig<TData, TError, TVariables, TContext>) {\n    this.options = {\n      ...config.defaultOptions,\n      ...config.options,\n    }\n    this.mutationId = config.mutationId\n    this.mutationCache = config.mutationCache\n    this.observers = []\n    this.state = config.state || getDefaultState()\n  }\n\n  setState(state: MutationState<TData, TError, TVariables, TContext>): void {\n    this.dispatch({ type: 'setState', state })\n  }\n\n  addObserver(observer: MutationObserver<any, any, any, any>): void {\n    if (this.observers.indexOf(observer) === -1) {\n      this.observers.push(observer)\n    }\n  }\n\n  removeObserver(observer: MutationObserver<any, any, any, any>): void {\n    this.observers = this.observers.filter(x => x !== observer)\n  }\n\n  cancel(): Promise<void> {\n    if (this.retryer) {\n      this.retryer.cancel()\n      return this.retryer.promise.then(noop).catch(noop)\n    }\n    return Promise.resolve()\n  }\n\n  continue(): Promise<TData> {\n    if (this.retryer) {\n      this.retryer.continue()\n      return this.retryer.promise\n    }\n    return this.execute()\n  }\n\n  execute(): Promise<TData> {\n    let data: TData\n\n    const restored = this.state.status === 'loading'\n\n    let promise = Promise.resolve()\n\n    if (!restored) {\n      this.dispatch({ type: 'loading', variables: this.options.variables! })\n      promise = promise\n        .then(() => this.options.onMutate?.(this.state.variables!))\n        .then(context => {\n          if (context !== this.state.context) {\n            this.dispatch({\n              type: 'loading',\n              context,\n              variables: this.state.variables,\n            })\n          }\n        })\n    }\n\n    return promise\n      .then(() => this.executeMutation())\n      .then(result => {\n        data = result\n      })\n      .then(() =>\n        this.options.onSuccess?.(\n          data,\n          this.state.variables!,\n          this.state.context!\n        )\n      )\n      .then(() =>\n        this.options.onSettled?.(\n          data,\n          null,\n          this.state.variables!,\n          this.state.context\n        )\n      )\n      .then(() => {\n        this.dispatch({ type: 'success', data })\n        return data\n      })\n      .catch(error => {\n        // Notify cache callback\n        if (this.mutationCache.config.onError) {\n          this.mutationCache.config.onError(\n            error,\n            this.state.variables,\n            this.state.context,\n            this as Mutation<unknown, unknown, unknown, unknown>\n          )\n        }\n\n        // Log error\n        getLogger().error(error)\n\n        return Promise.resolve()\n          .then(() =>\n            this.options.onError?.(\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() =>\n            this.options.onSettled?.(\n              undefined,\n              error,\n              this.state.variables!,\n              this.state.context\n            )\n          )\n          .then(() => {\n            this.dispatch({ type: 'error', error })\n            throw error\n          })\n      })\n  }\n\n  private executeMutation(): Promise<TData> {\n    this.retryer = new Retryer({\n      fn: () => {\n        if (!this.options.mutationFn) {\n          return Promise.reject('No mutationFn found')\n        }\n        return this.options.mutationFn(this.state.variables!)\n      },\n      onFail: () => {\n        this.dispatch({ type: 'failed' })\n      },\n      onPause: () => {\n        this.dispatch({ type: 'pause' })\n      },\n      onContinue: () => {\n        this.dispatch({ type: 'continue' })\n      },\n      retry: this.options.retry ?? 0,\n      retryDelay: this.options.retryDelay,\n    })\n\n    return this.retryer.promise\n  }\n\n  private dispatch(action: Action<TData, TError, TVariables, TContext>): void {\n    this.state = reducer(this.state, action)\n\n    notifyManager.batch(() => {\n      this.observers.forEach(observer => {\n        observer.onMutationUpdate(action)\n      })\n      this.mutationCache.notify(this)\n    })\n  }\n}\n\nexport function getDefaultState<\n  TData,\n  TError,\n  TVariables,\n  TContext\n>(): MutationState<TData, TError, TVariables, TContext> {\n  return {\n    context: undefined,\n    data: undefined,\n    error: null,\n    failureCount: 0,\n    isPaused: false,\n    status: 'idle',\n    variables: undefined,\n  }\n}\n\nfunction reducer<TData, TError, TVariables, TContext>(\n  state: MutationState<TData, TError, TVariables, TContext>,\n  action: Action<TData, TError, TVariables, TContext>\n): MutationState<TData, TError, TVariables, TContext> {\n  switch (action.type) {\n    case 'failed':\n      return {\n        ...state,\n        failureCount: state.failureCount + 1,\n      }\n    case 'pause':\n      return {\n        ...state,\n        isPaused: true,\n      }\n    case 'continue':\n      return {\n        ...state,\n        isPaused: false,\n      }\n    case 'loading':\n      return {\n        ...state,\n        context: action.context,\n        data: undefined,\n        error: null,\n        isPaused: false,\n        status: 'loading',\n        variables: action.variables,\n      }\n    case 'success':\n      return {\n        ...state,\n        data: action.data,\n        error: null,\n        status: 'success',\n        isPaused: false,\n      }\n    case 'error':\n      return {\n        ...state,\n        data: undefined,\n        error: action.error,\n        failureCount: state.failureCount + 1,\n        isPaused: false,\n        status: 'error',\n      }\n    case 'setState':\n      return {\n        ...state,\n        ...action.state,\n      }\n    default:\n      return state\n  }\n}\n","import type { MutationOptions } from './types'\nimport type { QueryClient } from './queryClient'\nimport { notifyManager } from './notifyManager'\nimport { Mutation, MutationState } from './mutation'\nimport { matchMutation, MutationFilters, noop } from './utils'\nimport { Subscribable } from './subscribable'\n\n// TYPES\n\ninterface MutationCacheConfig {\n  onError?: (\n    error: unknown,\n    variables: unknown,\n    context: unknown,\n    mutation: Mutation<unknown, unknown, unknown, unknown>\n  ) => void\n}\n\ntype MutationCacheListener = (mutation?: Mutation) => void\n\n// CLASS\n\nexport class MutationCache extends Subscribable<MutationCacheListener> {\n  config: MutationCacheConfig\n\n  private mutations: Mutation<any, any, any, any>[]\n  private mutationId: number\n\n  constructor(config?: MutationCacheConfig) {\n    super()\n    this.config = config || {}\n    this.mutations = []\n    this.mutationId = 0\n  }\n\n  build<TData, TError, TVariables, TContext>(\n    client: QueryClient,\n    options: MutationOptions<TData, TError, TVariables, TContext>,\n    state?: MutationState<TData, TError, TVariables, TContext>\n  ): Mutation<TData, TError, TVariables, TContext> {\n    const mutation = new Mutation({\n      mutationCache: this,\n      mutationId: ++this.mutationId,\n      options: client.defaultMutationOptions(options),\n      state,\n      defaultOptions: options.mutationKey\n        ? client.getMutationDefaults(options.mutationKey)\n        : undefined,\n    })\n\n    this.add(mutation)\n\n    return mutation\n  }\n\n  add(mutation: Mutation<any, any, any, any>): void {\n    this.mutations.push(mutation)\n    this.notify(mutation)\n  }\n\n  remove(mutation: Mutation<any, any, any, any>): void {\n    this.mutations = this.mutations.filter(x => x !== mutation)\n    mutation.cancel()\n    this.notify(mutation)\n  }\n\n  clear(): void {\n    notifyManager.batch(() => {\n      this.mutations.forEach(mutation => {\n        this.remove(mutation)\n      })\n    })\n  }\n\n  getAll(): Mutation[] {\n    return this.mutations\n  }\n\n  find<\n    TData = unknown,\n    TError = unknown,\n    TVariables = any,\n    TContext = unknown\n  >(\n    filters: MutationFilters\n  ): Mutation<TData, TError, TVariables, TContext> | undefined {\n    if (typeof filters.exact === 'undefined') {\n      filters.exact = true\n    }\n\n    return this.mutations.find(mutation => matchMutation(filters, mutation))\n  }\n\n  findAll(filters: MutationFilters): Mutation[] {\n    return this.mutations.filter(mutation => matchMutation(filters, mutation))\n  }\n\n  notify(mutation?: Mutation<any, any, any, any>) {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(mutation)\n      })\n    })\n  }\n\n  onFocus(): void {\n    this.resumePausedMutations()\n  }\n\n  onOnline(): void {\n    this.resumePausedMutations()\n  }\n\n  resumePausedMutations(): Promise<void> {\n    const pausedMutations = this.mutations.filter(x => x.state.isPaused)\n    return notifyManager.batch(() =>\n      pausedMutations.reduce(\n        (promise, mutation) =>\n          promise.then(() => mutation.continue().catch(noop)),\n        Promise.resolve()\n      )\n    )\n  }\n}\n","import type { QueryBehavior } from './query'\nimport { isCancelable } from './retryer'\nimport type { InfiniteData, QueryFunctionContext, QueryOptions } from './types'\n\nexport function infiniteQueryBehavior<\n  TQueryFnData,\n  TError,\n  TData\n>(): QueryBehavior<TQueryFnData, TError, InfiniteData<TData>> {\n  return {\n    onFetch: context => {\n      context.fetchFn = () => {\n        const fetchMore = context.fetchOptions?.meta?.fetchMore\n        const pageParam = fetchMore?.pageParam\n        const isFetchingNextPage = fetchMore?.direction === 'forward'\n        const isFetchingPreviousPage = fetchMore?.direction === 'backward'\n        const oldPages = context.state.data?.pages || []\n        const oldPageParams = context.state.data?.pageParams || []\n        let newPageParams = oldPageParams\n        let cancelled = false\n\n        // Get query function\n        const queryFn =\n          context.options.queryFn || (() => Promise.reject('Missing queryFn'))\n\n        // Create function to fetch a page\n        const fetchPage = (\n          pages: unknown[],\n          manual?: boolean,\n          param?: unknown,\n          previous?: boolean\n        ): Promise<unknown[]> => {\n          if (cancelled) {\n            return Promise.reject('Cancelled')\n          }\n\n          if (typeof param === 'undefined' && !manual && pages.length) {\n            return Promise.resolve(pages)\n          }\n\n          const queryFnContext: QueryFunctionContext = {\n            queryKey: context.queryKey,\n            pageParam: param,\n          }\n\n          const queryFnResult = queryFn(queryFnContext)\n\n          const promise = Promise.resolve(queryFnResult).then(page => {\n            newPageParams = previous\n              ? [param, ...newPageParams]\n              : [...newPageParams, param]\n            return previous ? [page, ...pages] : [...pages, page]\n          })\n\n          if (isCancelable(queryFnResult)) {\n            const promiseAsAny = promise as any\n            promiseAsAny.cancel = queryFnResult.cancel\n          }\n\n          return promise\n        }\n\n        let promise: Promise<unknown[]>\n\n        // Fetch first page?\n        if (!oldPages.length) {\n          promise = fetchPage([])\n        }\n\n        // Fetch next page?\n        else if (isFetchingNextPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getNextPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param)\n        }\n\n        // Fetch previous page?\n        else if (isFetchingPreviousPage) {\n          const manual = typeof pageParam !== 'undefined'\n          const param = manual\n            ? pageParam\n            : getPreviousPageParam(context.options, oldPages)\n          promise = fetchPage(oldPages, manual, param, true)\n        }\n\n        // Refetch pages\n        else {\n          newPageParams = []\n\n          const manual = typeof context.options.getNextPageParam === 'undefined'\n\n          // Fetch first page\n          promise = fetchPage([], manual, oldPageParams[0])\n\n          // Fetch remaining pages\n          for (let i = 1; i < oldPages.length; i++) {\n            promise = promise.then(pages => {\n              const param = manual\n                ? oldPageParams[i]\n                : getNextPageParam(context.options, pages)\n              return fetchPage(pages, manual, param)\n            })\n          }\n        }\n\n        const finalPromise = promise.then(pages => ({\n          pages,\n          pageParams: newPageParams,\n        }))\n\n        const finalPromiseAsAny = finalPromise as any\n\n        finalPromiseAsAny.cancel = () => {\n          cancelled = true\n          if (isCancelable(promise)) {\n            promise.cancel()\n          }\n        }\n\n        return finalPromise\n      }\n    },\n  }\n}\n\nexport function getNextPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getNextPageParam?.(pages[pages.length - 1], pages)\n}\n\nexport function getPreviousPageParam(\n  options: QueryOptions<any, any>,\n  pages: unknown[]\n): unknown | undefined {\n  return options.getPreviousPageParam?.(pages[0], pages)\n}\n\n/**\n * Checks if there is a next page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasNextPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getNextPageParam && Array.isArray(pages)) {\n    const nextPageParam = getNextPageParam(options, pages)\n    return (\n      typeof nextPageParam !== 'undefined' &&\n      nextPageParam !== null &&\n      nextPageParam !== false\n    )\n  }\n}\n\n/**\n * Checks if there is a previous page.\n * Returns `undefined` if it cannot be determined.\n */\nexport function hasPreviousPage(\n  options: QueryOptions<any, any>,\n  pages?: unknown\n): boolean | undefined {\n  if (options.getPreviousPageParam && Array.isArray(pages)) {\n    const previousPageParam = getPreviousPageParam(options, pages)\n    return (\n      typeof previousPageParam !== 'undefined' &&\n      previousPageParam !== null &&\n      previousPageParam !== false\n    )\n  }\n}\n","import {\n  QueryFilters,\n  Updater,\n  hashQueryKey,\n  noop,\n  parseFilterArgs,\n  parseQueryArgs,\n  partialMatchKey,\n  hashQueryKeyByOptions,\n  MutationFilters,\n} from './utils'\nimport type {\n  DefaultOptions,\n  FetchInfiniteQueryOptions,\n  FetchQueryOptions,\n  InfiniteData,\n  InvalidateOptions,\n  InvalidateQueryFilters,\n  MutationKey,\n  MutationObserverOptions,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryObserverOptions,\n  QueryOptions,\n  RefetchOptions,\n  ResetOptions,\n} from './types'\nimport type { QueryState, SetDataOptions } from './query'\nimport { QueryCache } from './queryCache'\nimport { MutationCache } from './mutationCache'\nimport { focusManager } from './focusManager'\nimport { onlineManager } from './onlineManager'\nimport { notifyManager } from './notifyManager'\nimport { CancelOptions } from './retryer'\nimport { infiniteQueryBehavior } from './infiniteQueryBehavior'\n\n// TYPES\n\ninterface QueryClientConfig {\n  queryCache?: QueryCache\n  mutationCache?: MutationCache\n  defaultOptions?: DefaultOptions\n}\n\ninterface QueryDefaults {\n  queryKey: QueryKey\n  defaultOptions: QueryOptions<any, any, any>\n}\n\ninterface MutationDefaults {\n  mutationKey: MutationKey\n  defaultOptions: MutationOptions<any, any, any, any>\n}\n\n// CLASS\n\nexport class QueryClient {\n  private queryCache: QueryCache\n  private mutationCache: MutationCache\n  private defaultOptions: DefaultOptions\n  private queryDefaults: QueryDefaults[]\n  private mutationDefaults: MutationDefaults[]\n  private unsubscribeFocus?: () => void\n  private unsubscribeOnline?: () => void\n\n  constructor(config: QueryClientConfig = {}) {\n    this.queryCache = config.queryCache || new QueryCache()\n    this.mutationCache = config.mutationCache || new MutationCache()\n    this.defaultOptions = config.defaultOptions || {}\n    this.queryDefaults = []\n    this.mutationDefaults = []\n  }\n\n  mount(): void {\n    this.unsubscribeFocus = focusManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onFocus()\n        this.queryCache.onFocus()\n      }\n    })\n    this.unsubscribeOnline = onlineManager.subscribe(() => {\n      if (focusManager.isFocused() && onlineManager.isOnline()) {\n        this.mutationCache.onOnline()\n        this.queryCache.onOnline()\n      }\n    })\n  }\n\n  unmount(): void {\n    this.unsubscribeFocus?.()\n    this.unsubscribeOnline?.()\n  }\n\n  isFetching(filters?: QueryFilters): number\n  isFetching(queryKey?: QueryKey, filters?: QueryFilters): number\n  isFetching(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): number {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    filters.fetching = true\n    return this.queryCache.findAll(filters).length\n  }\n\n  isMutating(filters?: MutationFilters): number {\n    return this.mutationCache.findAll({ ...filters, fetching: true }).length\n  }\n\n  getQueryData<TData = unknown>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): TData | undefined {\n    return this.queryCache.find<TData>(queryKey, filters)?.state.data\n  }\n\n  setQueryData<TData>(\n    queryKey: QueryKey,\n    updater: Updater<TData | undefined, TData>,\n    options?: SetDataOptions\n  ): TData {\n    const parsedOptions = parseQueryArgs(queryKey)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n    return this.queryCache\n      .build(this, defaultedOptions)\n      .setData(updater, options)\n  }\n\n  getQueryState<TData = unknown, TError = undefined>(\n    queryKey: QueryKey,\n    filters?: QueryFilters\n  ): QueryState<TData, TError> | undefined {\n    return this.queryCache.find<TData, TError>(queryKey, filters)?.state\n  }\n\n  removeQueries(filters?: QueryFilters): void\n  removeQueries(queryKey?: QueryKey, filters?: QueryFilters): void\n  removeQueries(arg1?: QueryKey | QueryFilters, arg2?: QueryFilters): void {\n    const [filters] = parseFilterArgs(arg1, arg2)\n    const queryCache = this.queryCache\n    notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        queryCache.remove(query)\n      })\n    })\n  }\n\n  resetQueries(filters?: QueryFilters, options?: ResetOptions): Promise<void>\n  resetQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: ResetOptions\n  ): Promise<void>\n  resetQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | ResetOptions,\n    arg3?: ResetOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n    const queryCache = this.queryCache\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: true,\n    }\n\n    return notifyManager.batch(() => {\n      queryCache.findAll(filters).forEach(query => {\n        query.reset()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  cancelQueries(filters?: QueryFilters, options?: CancelOptions): Promise<void>\n  cancelQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: CancelOptions\n  ): Promise<void>\n  cancelQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | CancelOptions,\n    arg3?: CancelOptions\n  ): Promise<void> {\n    const [filters, cancelOptions = {}] = parseFilterArgs(arg1, arg2, arg3)\n\n    if (typeof cancelOptions.revert === 'undefined') {\n      cancelOptions.revert = true\n    }\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.cancel(cancelOptions))\n    )\n\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  invalidateQueries(\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    queryKey?: QueryKey,\n    filters?: InvalidateQueryFilters,\n    options?: InvalidateOptions\n  ): Promise<void>\n  invalidateQueries(\n    arg1?: QueryKey | InvalidateQueryFilters,\n    arg2?: InvalidateQueryFilters | InvalidateOptions,\n    arg3?: InvalidateOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const refetchFilters: QueryFilters = {\n      ...filters,\n      active: filters.refetchActive ?? true,\n      inactive: filters.refetchInactive,\n    }\n\n    return notifyManager.batch(() => {\n      this.queryCache.findAll(filters).forEach(query => {\n        query.invalidate()\n      })\n      return this.refetchQueries(refetchFilters, options)\n    })\n  }\n\n  refetchQueries(\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    queryKey?: QueryKey,\n    filters?: QueryFilters,\n    options?: RefetchOptions\n  ): Promise<void>\n  refetchQueries(\n    arg1?: QueryKey | QueryFilters,\n    arg2?: QueryFilters | RefetchOptions,\n    arg3?: RefetchOptions\n  ): Promise<void> {\n    const [filters, options] = parseFilterArgs(arg1, arg2, arg3)\n\n    const promises = notifyManager.batch(() =>\n      this.queryCache.findAll(filters).map(query => query.fetch())\n    )\n\n    let promise = Promise.all(promises).then(noop)\n\n    if (!options?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData>\n  fetchQuery<TQueryFnData, TError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<TData> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    const defaultedOptions = this.defaultQueryOptions(parsedOptions)\n\n    // https://github.com/tannerlinsley/react-query/issues/652\n    if (typeof defaultedOptions.retry === 'undefined') {\n      defaultedOptions.retry = false\n    }\n\n    const query = this.queryCache.build(this, defaultedOptions)\n\n    return query.isStaleByTime(defaultedOptions.staleTime)\n      ? query.fetch(defaultedOptions)\n      : Promise.resolve(query.state.data as TData)\n  }\n\n  prefetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    options: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    queryKey: TQueryKey,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    arg1: TQueryKey | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?: QueryFunction<TQueryFnData, TQueryKey> | FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n  >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>>\n  fetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    arg1: TQueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<InfiniteData<TData>> {\n    const parsedOptions = parseQueryArgs(arg1, arg2, arg3)\n    parsedOptions.behavior = infiniteQueryBehavior<\n      TQueryFnData,\n      TError,\n      TData\n    >()\n    return this.fetchQuery(parsedOptions)\n  }\n\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n    >(\n    options: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n    >(\n    queryKey: TQueryKey,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<\n    TQueryFnData = unknown,\n    TError = unknown,\n    TData = TQueryFnData,\n    TQueryKey extends QueryKey = QueryKey\n    >(\n    queryKey: TQueryKey,\n    queryFn: QueryFunction<TQueryFnData, TQueryKey>,\n    options?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void>\n  prefetchInfiniteQuery<TQueryFnData, TError, TData = TQueryFnData, TQueryKey extends QueryKey = QueryKey>(\n    arg1: TQueryKey | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg2?:\n      | QueryFunction<TQueryFnData, TQueryKey>\n      | FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>,\n    arg3?: FetchInfiniteQueryOptions<TQueryFnData, TError, TData, TQueryKey>\n  ): Promise<void> {\n    return this.fetchInfiniteQuery(arg1 as any, arg2 as any, arg3)\n      .then(noop)\n      .catch(noop)\n  }\n\n  cancelMutations(): Promise<void> {\n    const promises = notifyManager.batch(() =>\n      this.mutationCache.getAll().map(mutation => mutation.cancel())\n    )\n    return Promise.all(promises).then(noop).catch(noop)\n  }\n\n  resumePausedMutations(): Promise<void> {\n    return this.getMutationCache().resumePausedMutations()\n  }\n\n  executeMutation<\n    TData = unknown,\n    TError = unknown,\n    TVariables = void,\n    TContext = unknown\n  >(\n    options: MutationOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    return this.mutationCache.build(this, options).execute()\n  }\n\n  getQueryCache(): QueryCache {\n    return this.queryCache\n  }\n\n  getMutationCache(): MutationCache {\n    return this.mutationCache\n  }\n\n  getDefaultOptions(): DefaultOptions {\n    return this.defaultOptions\n  }\n\n  setDefaultOptions(options: DefaultOptions): void {\n    this.defaultOptions = options\n  }\n\n  setQueryDefaults(\n    queryKey: QueryKey,\n    options: QueryObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.queryDefaults.find(\n      x => hashQueryKey(queryKey) === hashQueryKey(x.queryKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.queryDefaults.push({ queryKey, defaultOptions: options })\n    }\n  }\n\n  getQueryDefaults(\n    queryKey?: QueryKey\n  ): QueryObserverOptions<any, any, any, any, any> | undefined {\n    return queryKey\n      ? this.queryDefaults.find(x => partialMatchKey(queryKey, x.queryKey))\n          ?.defaultOptions\n      : undefined\n  }\n\n  setMutationDefaults(\n    mutationKey: MutationKey,\n    options: MutationObserverOptions<any, any, any, any>\n  ): void {\n    const result = this.mutationDefaults.find(\n      x => hashQueryKey(mutationKey) === hashQueryKey(x.mutationKey)\n    )\n    if (result) {\n      result.defaultOptions = options\n    } else {\n      this.mutationDefaults.push({ mutationKey, defaultOptions: options })\n    }\n  }\n\n  getMutationDefaults(\n    mutationKey?: MutationKey\n  ): MutationObserverOptions<any, any, any, any> | undefined {\n    return mutationKey\n      ? this.mutationDefaults.find(x =>\n          partialMatchKey(mutationKey, x.mutationKey)\n        )?.defaultOptions\n      : undefined\n  }\n\n  defaultQueryOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    if (options?._defaulted) {\n      return options\n    }\n\n    const defaultedOptions = {\n      ...this.defaultOptions.queries,\n      ...this.getQueryDefaults(options?.queryKey),\n      ...options,\n      _defaulted: true,\n    } as QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n\n    if (!defaultedOptions.queryHash && defaultedOptions.queryKey) {\n      defaultedOptions.queryHash = hashQueryKeyByOptions(\n        defaultedOptions.queryKey,\n        defaultedOptions\n      )\n    }\n\n    return defaultedOptions\n  }\n\n  defaultQueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey extends QueryKey\n  >(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverOptions<TQueryFnData, TError, TData, TQueryData, TQueryKey> {\n    return this.defaultQueryOptions(options)\n  }\n\n  defaultMutationOptions<T extends MutationOptions<any, any, any, any>>(\n    options?: T\n  ): T {\n    if (options?._defaulted) {\n      return options\n    }\n    return {\n      ...this.defaultOptions.mutations,\n      ...this.getMutationDefaults(options?.mutationKey),\n      ...options,\n      _defaulted: true,\n    } as T\n  }\n\n  clear(): void {\n    this.queryCache.clear()\n    this.mutationCache.clear()\n  }\n}\n","import {\n  isServer,\n  isValidTimeout,\n  noop,\n  replaceEqualDeep,\n  shallowEqualObjects,\n  timeUntilStale,\n} from './utils'\nimport { notifyManager } from './notifyManager'\nimport type {\n  PlaceholderDataFunction,\n  QueryKey,\n  QueryObserverBaseResult,\n  QueryObserverOptions,\n  QueryObserverResult,\n  QueryOptions,\n  RefetchOptions,\n  ResultOptions,\n} from './types'\nimport type { Query, QueryState, Action, FetchOptions } from './query'\nimport type { QueryClient } from './queryClient'\nimport { focusManager } from './focusManager'\nimport { Subscribable } from './subscribable'\nimport { getLogger } from './logger'\n\ntype QueryObserverListener<TData, TError> = (\n  result: QueryObserverResult<TData, TError>\n) => void\n\nexport interface NotifyOptions {\n  cache?: boolean\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\nexport interface ObserverFetchOptions extends FetchOptions {\n  throwOnError?: boolean\n}\n\nexport class QueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData,\n  TQueryKey extends QueryKey = QueryKey\n> extends Subscribable<QueryObserverListener<TData, TError>> {\n  options: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n\n  private client: QueryClient\n  private currentQuery!: Query<TQueryFnData, TError, TQueryData, TQueryKey>\n  private currentQueryInitialState!: QueryState<TQueryData, TError>\n  private currentResult!: QueryObserverResult<TData, TError>\n  private currentResultState?: QueryState<TQueryData, TError>\n  private currentResultOptions?: QueryObserverOptions<\n    TQueryFnData,\n    TError,\n    TData,\n    TQueryData,\n    TQueryKey\n  >\n  private previousQueryResult?: QueryObserverResult<TData, TError>\n  private previousSelectError: Error | null\n  private staleTimeoutId?: number\n  private refetchIntervalId?: number\n  private trackedProps!: Array<keyof QueryObserverResult>\n\n  constructor(\n    client: QueryClient,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ) {\n    super()\n\n    this.client = client\n    this.options = options\n    this.trackedProps = []\n    this.previousSelectError = null\n    this.bindMethods()\n    this.setOptions(options)\n  }\n\n  protected bindMethods(): void {\n    this.remove = this.remove.bind(this)\n    this.refetch = this.refetch.bind(this)\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.currentQuery.addObserver(this)\n\n      if (shouldFetchOnMount(this.currentQuery, this.options)) {\n        this.executeFetch()\n      }\n\n      this.updateTimers()\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  shouldFetchOnReconnect(): boolean {\n    return shouldFetchOnReconnect(this.currentQuery, this.options)\n  }\n\n  shouldFetchOnWindowFocus(): boolean {\n    return shouldFetchOnWindowFocus(this.currentQuery, this.options)\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.clearTimers()\n    this.currentQuery.removeObserver(this)\n  }\n\n  setOptions(\n    options?: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >,\n    notifyOptions?: NotifyOptions\n  ): void {\n    const prevOptions = this.options\n    const prevQuery = this.currentQuery\n\n    this.options = this.client.defaultQueryObserverOptions(options)\n\n    if (\n      typeof this.options.enabled !== 'undefined' &&\n      typeof this.options.enabled !== 'boolean'\n    ) {\n      throw new Error('Expected enabled to be a boolean')\n    }\n\n    // Keep previous query key if the user does not supply one\n    if (!this.options.queryKey) {\n      this.options.queryKey = prevOptions.queryKey\n    }\n\n    this.updateQuery()\n\n    const mounted = this.hasListeners()\n\n    // Fetch if there are subscribers\n    if (\n      mounted &&\n      shouldFetchOptionally(\n        this.currentQuery,\n        prevQuery,\n        this.options,\n        prevOptions\n      )\n    ) {\n      this.executeFetch()\n    }\n\n    // Update result\n    this.updateResult(notifyOptions)\n\n    // Update stale interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.staleTime !== prevOptions.staleTime)\n    ) {\n      this.updateStaleTimeout()\n    }\n\n    // Update refetch interval if needed\n    if (\n      mounted &&\n      (this.currentQuery !== prevQuery ||\n        this.options.enabled !== prevOptions.enabled ||\n        this.options.refetchInterval !== prevOptions.refetchInterval)\n    ) {\n      this.updateRefetchInterval()\n    }\n  }\n\n  getOptimisticResult(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return this.createResult(query, defaultedOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult<TData, TError> {\n    return this.currentResult\n  }\n\n  trackResult(\n    result: QueryObserverResult<TData, TError>\n  ): QueryObserverResult<TData, TError> {\n    const trackedResult = {} as QueryObserverResult<TData, TError>\n\n    Object.keys(result).forEach(key => {\n      Object.defineProperty(trackedResult, key, {\n        configurable: false,\n        enumerable: true,\n        get: () => {\n          const typedKey = key as keyof QueryObserverResult\n          if (!this.trackedProps.includes(typedKey)) {\n            this.trackedProps.push(typedKey)\n          }\n          return result[typedKey]\n        },\n      })\n    })\n\n    return trackedResult\n  }\n\n  getNextResult(\n    options?: ResultOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return new Promise((resolve, reject) => {\n      const unsubscribe = this.subscribe(result => {\n        if (!result.isFetching) {\n          unsubscribe()\n          if (result.isError && options?.throwOnError) {\n            reject(result.error)\n          } else {\n            resolve(result)\n          }\n        }\n      })\n    })\n  }\n\n  getCurrentQuery(): Query<TQueryFnData, TError, TQueryData, TQueryKey> {\n    return this.currentQuery\n  }\n\n  remove(): void {\n    this.client.getQueryCache().remove(this.currentQuery)\n  }\n\n  refetch(\n    options?: RefetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.fetch(options)\n  }\n\n  fetchOptimistic(\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): Promise<QueryObserverResult<TData, TError>> {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        defaultedOptions as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    return query.fetch().then(() => this.createResult(query, defaultedOptions))\n  }\n\n  protected fetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<QueryObserverResult<TData, TError>> {\n    return this.executeFetch(fetchOptions).then(() => {\n      this.updateResult()\n      return this.currentResult\n    })\n  }\n\n  private executeFetch(\n    fetchOptions?: ObserverFetchOptions\n  ): Promise<TQueryData | undefined> {\n    // Make sure we reference the latest query as the current one might have been removed\n    this.updateQuery()\n\n    // Fetch\n    let promise: Promise<TQueryData | undefined> = this.currentQuery.fetch(\n      this.options as QueryOptions<TQueryFnData, TError, TQueryData, TQueryKey>,\n      fetchOptions\n    )\n\n    if (!fetchOptions?.throwOnError) {\n      promise = promise.catch(noop)\n    }\n\n    return promise\n  }\n\n  private updateStaleTimeout(): void {\n    this.clearStaleTimeout()\n\n    if (\n      isServer ||\n      this.currentResult.isStale ||\n      !isValidTimeout(this.options.staleTime)\n    ) {\n      return\n    }\n\n    const time = timeUntilStale(\n      this.currentResult.dataUpdatedAt,\n      this.options.staleTime\n    )\n\n    // The timeout is sometimes triggered 1 ms before the stale time expiration.\n    // To mitigate this issue we always add 1 ms to the timeout.\n    const timeout = time + 1\n\n    this.staleTimeoutId = setTimeout(() => {\n      if (!this.currentResult.isStale) {\n        this.updateResult()\n      }\n    }, timeout)\n  }\n\n  private updateRefetchInterval(): void {\n    this.clearRefetchInterval()\n\n    if (\n      isServer ||\n      this.options.enabled === false ||\n      !isValidTimeout(this.options.refetchInterval)\n    ) {\n      return\n    }\n\n    this.refetchIntervalId = setInterval(() => {\n      if (\n        this.options.refetchIntervalInBackground ||\n        focusManager.isFocused()\n      ) {\n        this.executeFetch()\n      }\n    }, this.options.refetchInterval)\n  }\n\n  private updateTimers(): void {\n    this.updateStaleTimeout()\n    this.updateRefetchInterval()\n  }\n\n  private clearTimers(): void {\n    this.clearStaleTimeout()\n    this.clearRefetchInterval()\n  }\n\n  private clearStaleTimeout(): void {\n    clearTimeout(this.staleTimeoutId)\n    this.staleTimeoutId = undefined\n  }\n\n  private clearRefetchInterval(): void {\n    clearInterval(this.refetchIntervalId)\n    this.refetchIntervalId = undefined\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, TQueryData, TQueryKey>,\n    options: QueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData,\n      TQueryKey\n    >\n  ): QueryObserverResult<TData, TError> {\n    const prevQuery = this.currentQuery\n    const prevOptions = this.options\n    const prevResult = this.currentResult\n    const prevResultState = this.currentResultState\n    const prevResultOptions = this.currentResultOptions\n    const queryChange = query !== prevQuery\n    const queryInitialState = queryChange\n      ? query.state\n      : this.currentQueryInitialState\n    const prevQueryResult = queryChange\n      ? this.currentResult\n      : this.previousQueryResult\n\n    const { state } = query\n    let { dataUpdatedAt, error, errorUpdatedAt, isFetching, status } = state\n    let isPreviousData = false\n    let isPlaceholderData = false\n    let data: TData | undefined\n\n    // Optimistically set result in fetching state if needed\n    if (options.optimisticResults) {\n      const mounted = this.hasListeners()\n\n      const fetchOnMount = !mounted && shouldFetchOnMount(query, options)\n\n      const fetchOptionally =\n        mounted && shouldFetchOptionally(query, prevQuery, options, prevOptions)\n\n      if (fetchOnMount || fetchOptionally) {\n        isFetching = true\n        if (!dataUpdatedAt) {\n          status = 'loading'\n        }\n      }\n    }\n\n    // Keep previous data if needed\n    if (\n      options.keepPreviousData &&\n      !state.dataUpdateCount &&\n      prevQueryResult?.isSuccess &&\n      status !== 'error'\n    ) {\n      data = prevQueryResult.data\n      dataUpdatedAt = prevQueryResult.dataUpdatedAt\n      status = prevQueryResult.status\n      isPreviousData = true\n    }\n    // Select data if needed\n    else if (options.select && typeof state.data !== 'undefined') {\n      // Memoize select result\n      if (\n        prevResult &&\n        state.data === prevResultState?.data &&\n        options.select === prevResultOptions?.select &&\n        !this.previousSelectError\n      ) {\n        data = prevResult.data\n      } else {\n        try {\n          data = options.select(state.data)\n          if (options.structuralSharing !== false) {\n            data = replaceEqualDeep(prevResult?.data, data)\n          }\n          this.previousSelectError = null\n        } catch (selectError) {\n          getLogger().error(selectError)\n          error = selectError\n          this.previousSelectError = selectError\n          errorUpdatedAt = Date.now()\n          status = 'error'\n        }\n      }\n    }\n    // Use query data\n    else {\n      data = (state.data as unknown) as TData\n    }\n\n    // Show placeholder data if needed\n    if (\n      typeof options.placeholderData !== 'undefined' &&\n      typeof data === 'undefined' &&\n      status === 'loading'\n    ) {\n      let placeholderData\n\n      // Memoize placeholder data\n      if (\n        prevResult?.isPlaceholderData &&\n        options.placeholderData === prevResultOptions?.placeholderData\n      ) {\n        placeholderData = prevResult.data\n      } else {\n        placeholderData =\n          typeof options.placeholderData === 'function'\n            ? (options.placeholderData as PlaceholderDataFunction<TData>)()\n            : options.placeholderData\n      }\n\n      if (typeof placeholderData !== 'undefined') {\n        status = 'success'\n        data = placeholderData\n        isPlaceholderData = true\n      }\n    }\n\n    const result: QueryObserverBaseResult<TData, TError> = {\n      status,\n      isLoading: status === 'loading',\n      isSuccess: status === 'success',\n      isError: status === 'error',\n      isIdle: status === 'idle',\n      data,\n      dataUpdatedAt,\n      error,\n      errorUpdatedAt,\n      failureCount: state.fetchFailureCount,\n      isFetched: state.dataUpdateCount > 0 || state.errorUpdateCount > 0,\n      isFetchedAfterMount:\n        state.dataUpdateCount > queryInitialState.dataUpdateCount ||\n        state.errorUpdateCount > queryInitialState.errorUpdateCount,\n      isFetching,\n      isLoadingError: status === 'error' && state.dataUpdatedAt === 0,\n      isPlaceholderData,\n      isPreviousData,\n      isRefetchError: status === 'error' && state.dataUpdatedAt !== 0,\n      isStale: isStale(query, options),\n      refetch: this.refetch,\n      remove: this.remove,\n    }\n\n    return result as QueryObserverResult<TData, TError>\n  }\n\n  private shouldNotifyListeners(\n    result: QueryObserverResult,\n    prevResult?: QueryObserverResult\n  ): boolean {\n    if (!prevResult) {\n      return true\n    }\n\n    if (result === prevResult) {\n      return false\n    }\n\n    const { notifyOnChangeProps, notifyOnChangePropsExclusions } = this.options\n\n    if (!notifyOnChangeProps && !notifyOnChangePropsExclusions) {\n      return true\n    }\n\n    if (notifyOnChangeProps === 'tracked' && !this.trackedProps.length) {\n      return true\n    }\n\n    const includedProps =\n      notifyOnChangeProps === 'tracked'\n        ? this.trackedProps\n        : notifyOnChangeProps\n\n    return Object.keys(result).some(key => {\n      const typedKey = key as keyof QueryObserverResult\n      const changed = result[typedKey] !== prevResult[typedKey]\n      const isIncluded = includedProps?.some(x => x === key)\n      const isExcluded = notifyOnChangePropsExclusions?.some(x => x === key)\n      return changed && !isExcluded && (!includedProps || isIncluded)\n    })\n  }\n\n  updateResult(notifyOptions?: NotifyOptions): void {\n    const prevResult = this.currentResult as\n      | QueryObserverResult<TData, TError>\n      | undefined\n\n    this.currentResult = this.createResult(this.currentQuery, this.options)\n    this.currentResultState = this.currentQuery.state\n    this.currentResultOptions = this.options\n\n    // Only notify if something has changed\n    if (shallowEqualObjects(this.currentResult, prevResult)) {\n      return\n    }\n\n    // Determine which callbacks to trigger\n    const defaultNotifyOptions: NotifyOptions = { cache: true }\n\n    if (\n      notifyOptions?.listeners !== false &&\n      this.shouldNotifyListeners(this.currentResult, prevResult)\n    ) {\n      defaultNotifyOptions.listeners = true\n    }\n\n    this.notify({ ...defaultNotifyOptions, ...notifyOptions })\n  }\n\n  private updateQuery(): void {\n    const query = this.client\n      .getQueryCache()\n      .build(\n        this.client,\n        this.options as QueryOptions<\n          TQueryFnData,\n          TError,\n          TQueryData,\n          TQueryKey\n        >\n      )\n\n    if (query === this.currentQuery) {\n      return\n    }\n\n    const prevQuery = this.currentQuery\n    this.currentQuery = query\n    this.currentQueryInitialState = query.state\n    this.previousQueryResult = this.currentResult\n\n    if (this.hasListeners()) {\n      prevQuery?.removeObserver(this)\n      query.addObserver(this)\n    }\n  }\n\n  onQueryUpdate(action: Action<TData, TError>): void {\n    const notifyOptions: NotifyOptions = {}\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.updateResult(notifyOptions)\n\n    if (this.hasListeners()) {\n      this.updateTimers()\n    }\n  }\n\n  private notify(notifyOptions: NotifyOptions): void {\n    notifyManager.batch(() => {\n      // First trigger the configuration callbacks\n      if (notifyOptions.onSuccess) {\n        this.options.onSuccess?.(this.currentResult.data!)\n        this.options.onSettled?.(this.currentResult.data!, null)\n      } else if (notifyOptions.onError) {\n        this.options.onError?.(this.currentResult.error!)\n        this.options.onSettled?.(undefined, this.currentResult.error!)\n      }\n\n      // Then trigger the listeners\n      if (notifyOptions.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n\n      // Then the cache listeners\n      if (notifyOptions.cache) {\n        this.client\n          .getQueryCache()\n          .notify({ query: this.currentQuery, type: 'observerResultsUpdated' })\n      }\n    })\n  }\n}\n\nfunction shouldLoadOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    !query.state.dataUpdatedAt &&\n    !(query.state.status === 'error' && options.retryOnMount === false)\n  )\n}\n\nfunction shouldRefetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    query.state.dataUpdatedAt > 0 &&\n    (options.refetchOnMount === 'always' ||\n      (options.refetchOnMount !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnMount(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    shouldLoadOnMount(query, options) || shouldRefetchOnMount(query, options)\n  )\n}\n\nfunction shouldFetchOnReconnect(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnReconnect === 'always' ||\n      (options.refetchOnReconnect !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOnWindowFocus(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (options.refetchOnWindowFocus === 'always' ||\n      (options.refetchOnWindowFocus !== false && isStale(query, options)))\n  )\n}\n\nfunction shouldFetchOptionally(\n  query: Query<any, any, any, any>,\n  prevQuery: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>,\n  prevOptions: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return (\n    options.enabled !== false &&\n    (query !== prevQuery || prevOptions.enabled === false) &&\n    isStale(query, options)\n  )\n}\n\nfunction isStale(\n  query: Query<any, any, any, any>,\n  options: QueryObserverOptions<any, any, any, any, any>\n): boolean {\n  return query.isStaleByTime(options.staleTime)\n}\n","import { difference, replaceAt } from './utils'\nimport { notifyManager } from './notifyManager'\nimport type { QueryObserverOptions, QueryObserverResult } from './types'\nimport type { QueryClient } from './queryClient'\nimport { NotifyOptions, QueryObserver } from './queryObserver'\nimport { Subscribable } from './subscribable'\n\ntype QueriesObserverListener = (result: QueryObserverResult[]) => void\n\nexport class QueriesObserver extends Subscribable<QueriesObserverListener> {\n  private client: QueryClient\n  private result: QueryObserverResult[]\n  private queries: QueryObserverOptions[]\n  private observers: QueryObserver[]\n  private observersMap: Record<string, QueryObserver>\n\n  constructor(client: QueryClient, queries?: QueryObserverOptions[]) {\n    super()\n\n    this.client = client\n    this.queries = []\n    this.result = []\n    this.observers = []\n    this.observersMap = {}\n\n    if (queries) {\n      this.setQueries(queries)\n    }\n  }\n\n  protected onSubscribe(): void {\n    if (this.listeners.length === 1) {\n      this.observers.forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n    }\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.destroy()\n    }\n  }\n\n  destroy(): void {\n    this.listeners = []\n    this.observers.forEach(observer => {\n      observer.destroy()\n    })\n  }\n\n  setQueries(\n    queries: QueryObserverOptions[],\n    notifyOptions?: NotifyOptions\n  ): void {\n    this.queries = queries\n    this.updateObservers(notifyOptions)\n  }\n\n  getCurrentResult(): QueryObserverResult[] {\n    return this.result\n  }\n\n  getOptimisticResult(queries: QueryObserverOptions[]): QueryObserverResult[] {\n    return queries.map(options => {\n      const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n      return this.getObserver(defaultedOptions).getOptimisticResult(\n        defaultedOptions\n      )\n    })\n  }\n\n  private getObserver(options: QueryObserverOptions): QueryObserver {\n    const defaultedOptions = this.client.defaultQueryObserverOptions(options)\n    return (\n      this.observersMap[defaultedOptions.queryHash!] ||\n      new QueryObserver(this.client, defaultedOptions)\n    )\n  }\n\n  private updateObservers(notifyOptions?: NotifyOptions): void {\n    notifyManager.batch(() => {\n      let hasIndexChange = false\n\n      const prevObservers = this.observers\n      const prevOberversMap = this.observersMap\n\n      const newResult: QueryObserverResult[] = []\n      const newObservers: QueryObserver[] = []\n      const newObserversMap: Record<string, QueryObserver> = {}\n\n      this.queries.forEach((options, i) => {\n        const defaultedOptions = this.client.defaultQueryObserverOptions(\n          options\n        )\n        const queryHash = defaultedOptions.queryHash!\n        const observer = this.getObserver(defaultedOptions)\n\n        if (prevOberversMap[queryHash]) {\n          observer.setOptions(defaultedOptions, notifyOptions)\n        }\n\n        if (observer !== prevObservers[i]) {\n          hasIndexChange = true\n        }\n\n        newObservers.push(observer)\n        newResult.push(observer.getCurrentResult())\n        newObserversMap[queryHash] = observer\n      })\n\n      if (prevObservers.length === newObservers.length && !hasIndexChange) {\n        return\n      }\n\n      this.observers = newObservers\n      this.observersMap = newObserversMap\n      this.result = newResult\n\n      if (!this.hasListeners()) {\n        return\n      }\n\n      difference(prevObservers, newObservers).forEach(observer => {\n        observer.destroy()\n      })\n\n      difference(newObservers, prevObservers).forEach(observer => {\n        observer.subscribe(result => {\n          this.onUpdate(observer, result)\n        })\n      })\n\n      this.notify()\n    })\n  }\n\n  private onUpdate(observer: QueryObserver, result: QueryObserverResult): void {\n    const index = this.observers.indexOf(observer)\n    if (index !== -1) {\n      this.result = replaceAt(this.result, index, result)\n      this.notify()\n    }\n  }\n\n  private notify(): void {\n    notifyManager.batch(() => {\n      this.listeners.forEach(listener => {\n        listener(this.result)\n      })\n    })\n  }\n}\n","import type {\n  FetchNextPageOptions,\n  FetchPreviousPageOptions,\n  InfiniteData,\n  InfiniteQueryObserverOptions,\n  InfiniteQueryObserverResult,\n} from './types'\nimport type { QueryClient } from './queryClient'\nimport { ObserverFetchOptions, QueryObserver } from './queryObserver'\nimport {\n  hasNextPage,\n  hasPreviousPage,\n  infiniteQueryBehavior,\n} from './infiniteQueryBehavior'\nimport { Query } from './query'\n\ntype InfiniteQueryObserverListener<TData, TError> = (\n  result: InfiniteQueryObserverResult<TData, TError>\n) => void\n\nexport class InfiniteQueryObserver<\n  TQueryFnData = unknown,\n  TError = unknown,\n  TData = TQueryFnData,\n  TQueryData = TQueryFnData\n> extends QueryObserver<\n  TQueryFnData,\n  TError,\n  InfiniteData<TData>,\n  InfiniteData<TQueryData>\n> {\n  // Type override\n  subscribe!: (\n    listener?: InfiniteQueryObserverListener<TData, TError>\n  ) => () => void\n\n  // Type override\n  getCurrentResult!: () => InfiniteQueryObserverResult<TData, TError>\n\n  // Type override\n  protected fetch!: (\n    fetchOptions?: ObserverFetchOptions\n  ) => Promise<InfiniteQueryObserverResult<TData, TError>>\n\n  // eslint-disable-next-line @typescript-eslint/no-useless-constructor\n  constructor(\n    client: QueryClient,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ) {\n    super(client, options)\n  }\n\n  protected bindMethods(): void {\n    super.bindMethods()\n    this.fetchNextPage = this.fetchNextPage.bind(this)\n    this.fetchPreviousPage = this.fetchPreviousPage.bind(this)\n  }\n\n  setOptions(\n    options?: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): void {\n    super.setOptions({\n      ...options,\n      behavior: infiniteQueryBehavior(),\n    })\n  }\n\n  getOptimisticResult(\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    options.behavior = infiniteQueryBehavior()\n    return super.getOptimisticResult(options) as InfiniteQueryObserverResult<\n      TData,\n      TError\n    >\n  }\n\n  fetchNextPage(\n    options?: FetchNextPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'forward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  fetchPreviousPage(\n    options?: FetchPreviousPageOptions\n  ): Promise<InfiniteQueryObserverResult<TData, TError>> {\n    return this.fetch({\n      cancelRefetch: true,\n      throwOnError: options?.throwOnError,\n      meta: {\n        fetchMore: { direction: 'backward', pageParam: options?.pageParam },\n      },\n    })\n  }\n\n  protected createResult(\n    query: Query<TQueryFnData, TError, InfiniteData<TQueryData>>,\n    options: InfiniteQueryObserverOptions<\n      TQueryFnData,\n      TError,\n      TData,\n      TQueryData\n    >\n  ): InfiniteQueryObserverResult<TData, TError> {\n    const { state } = query\n    const result = super.createResult(query, options)\n    return {\n      ...result,\n      fetchNextPage: this.fetchNextPage,\n      fetchPreviousPage: this.fetchPreviousPage,\n      hasNextPage: hasNextPage(options, state.data?.pages),\n      hasPreviousPage: hasPreviousPage(options, state.data?.pages),\n      isFetchingNextPage:\n        state.isFetching && state.fetchMeta?.fetchMore?.direction === 'forward',\n      isFetchingPreviousPage:\n        state.isFetching &&\n        state.fetchMeta?.fetchMore?.direction === 'backward',\n    }\n  }\n}\n","import { Action, getDefaultState, Mutation } from './mutation'\nimport { notifyManager } from './notifyManager'\nimport type { QueryClient } from './queryClient'\nimport { Subscribable } from './subscribable'\nimport type {\n  MutateOptions,\n  MutationObserverResult,\n  MutationObserverOptions,\n} from './types'\n\n// TYPES\n\ntype MutationObserverListener<TData, TError, TVariables, TContext> = (\n  result: MutationObserverResult<TData, TError, TVariables, TContext>\n) => void\n\ninterface NotifyOptions {\n  listeners?: boolean\n  onError?: boolean\n  onSuccess?: boolean\n}\n\n// CLASS\n\nexport class MutationObserver<\n  TData = unknown,\n  TError = unknown,\n  TVariables = void,\n  TContext = unknown\n> extends Subscribable<\n  MutationObserverListener<TData, TError, TVariables, TContext>\n> {\n  options!: MutationObserverOptions<TData, TError, TVariables, TContext>\n\n  private client: QueryClient\n  private currentResult!: MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  >\n  private currentMutation?: Mutation<TData, TError, TVariables, TContext>\n  private mutateOptions?: MutateOptions<TData, TError, TVariables, TContext>\n\n  constructor(\n    client: QueryClient,\n    options: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    super()\n\n    this.client = client\n    this.setOptions(options)\n    this.bindMethods()\n    this.updateResult()\n  }\n\n  protected bindMethods(): void {\n    this.mutate = this.mutate.bind(this)\n    this.reset = this.reset.bind(this)\n  }\n\n  setOptions(\n    options?: MutationObserverOptions<TData, TError, TVariables, TContext>\n  ) {\n    this.options = this.client.defaultMutationOptions(options)\n  }\n\n  protected onUnsubscribe(): void {\n    if (!this.listeners.length) {\n      this.currentMutation?.removeObserver(this)\n    }\n  }\n\n  onMutationUpdate(action: Action<TData, TError, TVariables, TContext>): void {\n    this.updateResult()\n\n    // Determine which callbacks to trigger\n    const notifyOptions: NotifyOptions = {\n      listeners: true,\n    }\n\n    if (action.type === 'success') {\n      notifyOptions.onSuccess = true\n    } else if (action.type === 'error') {\n      notifyOptions.onError = true\n    }\n\n    this.notify(notifyOptions)\n  }\n\n  getCurrentResult(): MutationObserverResult<\n    TData,\n    TError,\n    TVariables,\n    TContext\n  > {\n    return this.currentResult\n  }\n\n  reset(): void {\n    this.currentMutation = undefined\n    this.updateResult()\n    this.notify({ listeners: true })\n  }\n\n  mutate(\n    variables?: TVariables,\n    options?: MutateOptions<TData, TError, TVariables, TContext>\n  ): Promise<TData> {\n    this.mutateOptions = options\n\n    if (this.currentMutation) {\n      this.currentMutation.removeObserver(this)\n    }\n\n    this.currentMutation = this.client.getMutationCache().build(this.client, {\n      ...this.options,\n      variables:\n        typeof variables !== 'undefined' ? variables : this.options.variables,\n    })\n\n    this.currentMutation.addObserver(this)\n\n    return this.currentMutation.execute()\n  }\n\n  private updateResult(): void {\n    const state = this.currentMutation\n      ? this.currentMutation.state\n      : getDefaultState<TData, TError, TVariables, TContext>()\n\n    this.currentResult = {\n      ...state,\n      isLoading: state.status === 'loading',\n      isSuccess: state.status === 'success',\n      isError: state.status === 'error',\n      isIdle: state.status === 'idle',\n      mutate: this.mutate,\n      reset: this.reset,\n    }\n  }\n\n  private notify(options: NotifyOptions) {\n    notifyManager.batch(() => {\n      // First trigger the mutate callbacks\n      if (this.mutateOptions) {\n        if (options.onSuccess) {\n          this.mutateOptions.onSuccess?.(\n            this.currentResult.data!,\n            this.currentResult.variables!,\n            this.currentResult.context!\n          )\n          this.mutateOptions.onSettled?.(\n            this.currentResult.data!,\n            null,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        } else if (options.onError) {\n          this.mutateOptions.onError?.(\n            this.currentResult.error!,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n          this.mutateOptions.onSettled?.(\n            undefined,\n            this.currentResult.error,\n            this.currentResult.variables!,\n            this.currentResult.context\n          )\n        }\n      }\n\n      // Then trigger the listeners\n      if (options.listeners) {\n        this.listeners.forEach(listener => {\n          listener(this.currentResult)\n        })\n      }\n    })\n  }\n}\n"],"names":["_inheritsLoose","subClass","superClass","prototype","Object","create","constructor","__proto__","Subscribable","listeners","subscribe","listener","callback","undefined","push","onSubscribe","filter","x","onUnsubscribe","hasListeners","length","_extends","assign","target","i","arguments","source","key","hasOwnProperty","call","apply","isServer","window","noop","functionalUpdate","updater","input","isValidTimeout","value","Infinity","ensureArray","Array","isArray","difference","array1","array2","indexOf","replaceAt","array","index","copy","slice","timeUntilStale","updatedAt","staleTime","Math","max","Date","now","parseQueryArgs","arg1","arg2","arg3","isQueryKey","queryKey","queryFn","parseFilterArgs","matchQuery","filters","query","active","exact","fetching","inactive","predicate","stale","queryHash","hashQueryKeyByOptions","options","partialMatchKey","isActive","isStale","isFetching","matchMutation","mutation","mutationKey","hashQueryKey","state","status","hashFn","queryKeyHashFn","asArray","stableValueHash","JSON","stringify","_","val","isPlainObject","keys","sort","reduce","result","a","b","partialDeepEqual","some","replaceEqualDeep","aSize","bItems","bSize","equalItems","shallowEqualObjects","o","hasObjectPrototype","ctor","prot","toString","isError","Error","sleep","timeout","Promise","resolve","setTimeout","scheduleMicrotask","then","catch","error","FocusManager","removeEventListener","setDefaultEventListener","setEventListener","setup","focused","setFocused","onFocus","forEach","isFocused","document","includes","visibilityState","addEventListener","focusManager","OnlineManager","online","setOnline","onOnline","isOnline","navigator","onLine","onlineManager","defaultRetryDelay","failureCount","min","isCancelable","cancel","CancelledError","revert","silent","isCancelledError","Retryer","config","cancelRetry","cancelFn","continueFn","promiseResolve","promiseReject","cancelOptions","continue","isPaused","isResolved","isTransportCancelable","promise","outerResolve","outerReject","onSuccess","reject","onError","pause","continueResolve","onPause","onContinue","run","promiseOrValue","fn","retry","retryDelay","delay","shouldRetry","onFail","NotifyManager","queue","transactions","notifyFn","batchNotifyFn","batch","flush","schedule","batchCalls","args","setNotifyFunction","setBatchNotifyFunction","notifyManager","logger","console","warn","log","getLogger","setLogger","newLogger","Query","defaultOptions","setOptions","observers","cache","initialState","getDefaultState","scheduleGc","cacheTime","setDefaultOptions","clearGcTimeout","gcTimeout","optionalRemove","clearTimeout","remove","setData","prevData","data","isDataEqual","structuralSharing","dispatch","type","dataUpdatedAt","setState","setStateOptions","retryer","destroy","reset","observer","enabled","isInvalidated","getCurrentResult","isStaleByTime","find","shouldFetchOnWindowFocus","refetch","shouldFetchOnReconnect","addObserver","notify","removeObserver","invalidate","fetch","fetchOptions","cancelRefetch","queryFnContext","pageParam","fetchFn","context","behavior","onFetch","revertState","fetchMeta","meta","action","reducer","onQueryUpdate","initialData","hasInitialData","initialDataUpdatedAt","hasData","dataUpdateCount","errorUpdateCount","errorUpdatedAt","fetchFailureCount","QueryCache","queries","queriesMap","build","client","get","defaultQueryOptions","getQueryDefaults","add","queryInMap","clear","getAll","findAll","event","Mutation","mutationId","mutationCache","execute","restored","variables","onMutate","executeMutation","onSettled","mutationFn","onMutationUpdate","MutationCache","mutations","defaultMutationOptions","getMutationDefaults","resumePausedMutations","pausedMutations","infiniteQueryBehavior","fetchMore","isFetchingNextPage","direction","isFetchingPreviousPage","oldPages","pages","oldPageParams","pageParams","newPageParams","cancelled","fetchPage","manual","param","previous","queryFnResult","page","promiseAsAny","getNextPageParam","getPreviousPageParam","finalPromise","finalPromiseAsAny","hasNextPage","nextPageParam","hasPreviousPage","previousPageParam","QueryClient","queryCache","queryDefaults","mutationDefaults","mount","unsubscribeFocus","unsubscribeOnline","unmount","isMutating","getQueryData","setQueryData","parsedOptions","defaultedOptions","getQueryState","removeQueries","resetQueries","refetchFilters","refetchQueries","cancelQueries","promises","map","all","invalidateQueries","refetchActive","refetchInactive","throwOnError","fetchQuery","prefetchQuery","fetchInfiniteQuery","prefetchInfiniteQuery","cancelMutations","getMutationCache","getQueryCache","getDefaultOptions","setQueryDefaults","setMutationDefaults","_defaulted","defaultQueryObserverOptions","QueryObserver","trackedProps","previousSelectError","bindMethods","bind","currentQuery","shouldFetchOnMount","executeFetch","updateTimers","clearTimers","notifyOptions","prevOptions","prevQuery","updateQuery","mounted","shouldFetchOptionally","updateResult","updateStaleTimeout","refetchInterval","updateRefetchInterval","getOptimisticResult","createResult","currentResult","trackResult","trackedResult","defineProperty","configurable","enumerable","typedKey","getNextResult","unsubscribe","getCurrentQuery","fetchOptimistic","clearStaleTimeout","time","staleTimeoutId","clearRefetchInterval","refetchIntervalId","setInterval","refetchIntervalInBackground","clearInterval","prevResult","prevResultState","currentResultState","prevResultOptions","currentResultOptions","queryChange","queryInitialState","currentQueryInitialState","prevQueryResult","previousQueryResult","isPreviousData","isPlaceholderData","optimisticResults","fetchOnMount","fetchOptionally","keepPreviousData","isSuccess","select","selectError","placeholderData","isLoading","isIdle","isFetched","isFetchedAfterMount","isLoadingError","isRefetchError","shouldNotifyListeners","notifyOnChangeProps","notifyOnChangePropsExclusions","includedProps","changed","isIncluded","isExcluded","defaultNotifyOptions","shouldLoadOnMount","retryOnMount","shouldRefetchOnMount","refetchOnMount","refetchOnReconnect","refetchOnWindowFocus","QueriesObserver","observersMap","setQueries","onUpdate","updateObservers","getObserver","hasIndexChange","prevObservers","prevOberversMap","newResult","newObservers","newObserversMap","InfiniteQueryObserver","fetchNextPage","fetchPreviousPage","MutationObserver","mutate","currentMutation","mutateOptions"],"mappings":"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"}