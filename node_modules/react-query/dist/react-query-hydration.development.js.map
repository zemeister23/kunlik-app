{"version":3,"file":"react-query-hydration.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../src/hydration/hydration.ts","../src/hydration/react.tsx"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { QueryClient } from '../core/queryClient'\nimport type { Query, QueryState } from '../core/query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from '../core/types'\nimport type { Mutation, MutationState } from '../core/mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options?: DehydrateOptions\n): DehydratedState {\n  options = options || {}\n\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options?.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options?.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n","import React from 'react'\n\nimport { useQueryClient } from 'react-query'\nimport { hydrate, HydrateOptions } from './hydration'\n\nexport function useHydrate(state: unknown, options?: HydrateOptions) {\n  const queryClient = useQueryClient()\n\n  const optionsRef = React.useRef(options)\n  optionsRef.current = options\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization.\n  // hydrate can and should be run *during* render here for SSR to work properly\n  React.useMemo(() => {\n    if (state) {\n      hydrate(queryClient, state, optionsRef.current)\n    }\n  }, [queryClient, state])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n  options?: HydrateOptions\n}\n\nexport const Hydrate: React.FC<HydrateProps> = ({\n  children,\n  options,\n  state,\n}) => {\n  useHydrate(state, options)\n  return children as React.ReactElement<any>\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","build","defaultOptions","dehydratedQuery","get","dataUpdatedAt","setState","useHydrate","queryClient","useQueryClient","optionsRef","React","useRef","current","useMemo","Hydrate","children"],"mappings":"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"}