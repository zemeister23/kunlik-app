{"version":3,"file":"persistQueryClient-experimental.development.js","sources":["../node_modules/@babel/runtime/helpers/esm/extends.js","../src/core/utils.ts","../src/core/logger.ts","../src/hydration/hydration.ts","../src/persistQueryClient-experimental/index.ts"],"sourcesContent":["export default function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}","import type { Mutation } from './mutation'\nimport type { Query } from './query'\nimport type {\n  MutationFunction,\n  MutationKey,\n  MutationOptions,\n  QueryFunction,\n  QueryKey,\n  QueryOptions,\n} from './types'\n\n// TYPES\n\nexport interface QueryFilters {\n  /**\n   * Include or exclude active queries\n   */\n  active?: boolean\n  /**\n   * Match query key exactly\n   */\n  exact?: boolean\n  /**\n   * Include or exclude inactive queries\n   */\n  inactive?: boolean\n  /**\n   * Include queries matching this predicate function\n   */\n  predicate?: (query: Query) => boolean\n  /**\n   * Include queries matching this query key\n   */\n  queryKey?: QueryKey\n  /**\n   * Include or exclude stale queries\n   */\n  stale?: boolean\n  /**\n   * Include or exclude fetching queries\n   */\n  fetching?: boolean\n}\n\nexport interface MutationFilters {\n  /**\n   * Match mutation key exactly\n   */\n  exact?: boolean\n  /**\n   * Include mutations matching this predicate function\n   */\n  predicate?: (mutation: Mutation<any, any, any>) => boolean\n  /**\n   * Include mutations matching this mutation key\n   */\n  mutationKey?: MutationKey\n  /**\n   * Include or exclude fetching mutations\n   */\n  fetching?: boolean\n}\n\nexport type DataUpdateFunction<TInput, TOutput> = (input: TInput) => TOutput\n\nexport type Updater<TInput, TOutput> =\n  | TOutput\n  | DataUpdateFunction<TInput, TOutput>\n\n// UTILS\n\nexport const isServer = typeof window === 'undefined'\n\nexport function noop(): undefined {\n  return undefined\n}\n\nexport function functionalUpdate<TInput, TOutput>(\n  updater: Updater<TInput, TOutput>,\n  input: TInput\n): TOutput {\n  return typeof updater === 'function'\n    ? (updater as DataUpdateFunction<TInput, TOutput>)(input)\n    : updater\n}\n\nexport function isValidTimeout(value: any): value is number {\n  return typeof value === 'number' && value >= 0 && value !== Infinity\n}\n\nexport function ensureArray<T>(value: T | T[]): T[] {\n  return Array.isArray(value) ? value : [value]\n}\n\nexport function difference<T>(array1: T[], array2: T[]): T[] {\n  return array1.filter(x => array2.indexOf(x) === -1)\n}\n\nexport function replaceAt<T>(array: T[], index: number, value: T): T[] {\n  const copy = array.slice(0)\n  copy[index] = value\n  return copy\n}\n\nexport function timeUntilStale(updatedAt: number, staleTime?: number): number {\n  return Math.max(updatedAt + (staleTime || 0) - Date.now(), 0)\n}\n\nexport function parseQueryArgs<\n  TOptions extends QueryOptions<any, any, any, TQueryKey>,\n  TQueryKey extends QueryKey = QueryKey\n>(\n  arg1: TQueryKey | TOptions,\n  arg2?: QueryFunction<any, TQueryKey> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (!isQueryKey(arg1)) {\n    return arg1 as TOptions\n  }\n\n  if (typeof arg2 === 'function') {\n    return { ...arg3, queryKey: arg1, queryFn: arg2 } as TOptions\n  }\n\n  return { ...arg2, queryKey: arg1 } as TOptions\n}\n\nexport function parseMutationArgs<\n  TOptions extends MutationOptions<any, any, any, any>\n>(\n  arg1: MutationKey | MutationFunction<any, any> | TOptions,\n  arg2?: MutationFunction<any, any> | TOptions,\n  arg3?: TOptions\n): TOptions {\n  if (isQueryKey(arg1)) {\n    if (typeof arg2 === 'function') {\n      return { ...arg3, mutationKey: arg1, mutationFn: arg2 } as TOptions\n    }\n    return { ...arg2, mutationKey: arg1 } as TOptions\n  }\n\n  if (typeof arg1 === 'function') {\n    return { ...arg2, mutationFn: arg1 } as TOptions\n  }\n\n  return { ...arg1 } as TOptions\n}\n\nexport function parseFilterArgs<\n  TFilters extends QueryFilters,\n  TOptions = unknown\n>(\n  arg1?: QueryKey | TFilters,\n  arg2?: TFilters | TOptions,\n  arg3?: TOptions\n): [TFilters, TOptions | undefined] {\n  return (isQueryKey(arg1)\n    ? [{ ...arg2, queryKey: arg1 }, arg3]\n    : [arg1 || {}, arg2]) as [TFilters, TOptions]\n}\n\nexport function matchQuery(\n  filters: QueryFilters,\n  query: Query<any, any, any, any>\n): boolean {\n  const {\n    active,\n    exact,\n    fetching,\n    inactive,\n    predicate,\n    queryKey,\n    stale,\n  } = filters\n\n  if (isQueryKey(queryKey)) {\n    if (exact) {\n      if (query.queryHash !== hashQueryKeyByOptions(queryKey, query.options)) {\n        return false\n      }\n    } else if (!partialMatchKey(query.queryKey, queryKey)) {\n      return false\n    }\n  }\n\n  let isActive\n\n  if (inactive === false || (active && !inactive)) {\n    isActive = true\n  } else if (active === false || (inactive && !active)) {\n    isActive = false\n  }\n\n  if (typeof isActive === 'boolean' && query.isActive() !== isActive) {\n    return false\n  }\n\n  if (typeof stale === 'boolean' && query.isStale() !== stale) {\n    return false\n  }\n\n  if (typeof fetching === 'boolean' && query.isFetching() !== fetching) {\n    return false\n  }\n\n  if (predicate && !predicate(query)) {\n    return false\n  }\n\n  return true\n}\n\nexport function matchMutation(\n  filters: MutationFilters,\n  mutation: Mutation<any, any>\n): boolean {\n  const { exact, fetching, predicate, mutationKey } = filters\n  if (isQueryKey(mutationKey)) {\n    if (!mutation.options.mutationKey) {\n      return false\n    }\n    if (exact) {\n      if (\n        hashQueryKey(mutation.options.mutationKey) !== hashQueryKey(mutationKey)\n      ) {\n        return false\n      }\n    } else if (!partialMatchKey(mutation.options.mutationKey, mutationKey)) {\n      return false\n    }\n  }\n\n  if (\n    typeof fetching === 'boolean' &&\n    (mutation.state.status === 'loading') !== fetching\n  ) {\n    return false\n  }\n\n  if (predicate && !predicate(mutation)) {\n    return false\n  }\n\n  return true\n}\n\nexport function hashQueryKeyByOptions<TQueryKey extends QueryKey = QueryKey>(\n  queryKey: TQueryKey,\n  options?: QueryOptions<any, any, any, TQueryKey>\n): string {\n  const hashFn = options?.queryKeyHashFn || hashQueryKey\n  return hashFn(queryKey)\n}\n\n/**\n * Default query keys hash function.\n */\nexport function hashQueryKey(queryKey: QueryKey): string {\n  const asArray = Array.isArray(queryKey) ? queryKey : [queryKey]\n  return stableValueHash(asArray)\n}\n\n/**\n * Hashes the value into a stable hash.\n */\nexport function stableValueHash(value: any): string {\n  return JSON.stringify(value, (_, val) =>\n    isPlainObject(val)\n      ? Object.keys(val)\n          .sort()\n          .reduce((result, key) => {\n            result[key] = val[key]\n            return result\n          }, {} as any)\n      : val\n  )\n}\n\n/**\n * Checks if key `b` partially matches with key `a`.\n */\nexport function partialMatchKey(a: QueryKey, b: QueryKey): boolean {\n  return partialDeepEqual(ensureArray(a), ensureArray(b))\n}\n\n/**\n * Checks if `b` partially matches with `a`.\n */\nexport function partialDeepEqual(a: any, b: any): boolean {\n  if (a === b) {\n    return true\n  }\n\n  if (typeof a !== typeof b) {\n    return false\n  }\n\n  if (a && b && typeof a === 'object' && typeof b === 'object') {\n    return !Object.keys(b).some(key => !partialDeepEqual(a[key], b[key]))\n  }\n\n  return false\n}\n\n/**\n * This function returns `a` if `b` is deeply equal.\n * If not, it will replace any deeply equal children of `b` with those of `a`.\n * This can be used for structural sharing between JSON values for example.\n */\nexport function replaceEqualDeep<T>(a: unknown, b: T): T\nexport function replaceEqualDeep(a: any, b: any): any {\n  if (a === b) {\n    return a\n  }\n\n  const array = Array.isArray(a) && Array.isArray(b)\n\n  if (array || (isPlainObject(a) && isPlainObject(b))) {\n    const aSize = array ? a.length : Object.keys(a).length\n    const bItems = array ? b : Object.keys(b)\n    const bSize = bItems.length\n    const copy: any = array ? [] : {}\n\n    let equalItems = 0\n\n    for (let i = 0; i < bSize; i++) {\n      const key = array ? i : bItems[i]\n      copy[key] = replaceEqualDeep(a[key], b[key])\n      if (copy[key] === a[key]) {\n        equalItems++\n      }\n    }\n\n    return aSize === bSize && equalItems === aSize ? a : copy\n  }\n\n  return b\n}\n\n/**\n * Shallow compare objects. Only works with objects that always have the same properties.\n */\nexport function shallowEqualObjects<T>(a: T, b: T): boolean {\n  if ((a && !b) || (b && !a)) {\n    return false\n  }\n\n  for (const key in a) {\n    if (a[key] !== b[key]) {\n      return false\n    }\n  }\n\n  return true\n}\n\n// Copied from: https://github.com/jonschlinkert/is-plain-object\nexport function isPlainObject(o: any): o is Object {\n  if (!hasObjectPrototype(o)) {\n    return false\n  }\n\n  // If has modified constructor\n  const ctor = o.constructor\n  if (typeof ctor === 'undefined') {\n    return true\n  }\n\n  // If has modified prototype\n  const prot = ctor.prototype\n  if (!hasObjectPrototype(prot)) {\n    return false\n  }\n\n  // If constructor does not have an Object-specific method\n  if (!prot.hasOwnProperty('isPrototypeOf')) {\n    return false\n  }\n\n  // Most likely a plain Object\n  return true\n}\n\nfunction hasObjectPrototype(o: any): boolean {\n  return Object.prototype.toString.call(o) === '[object Object]'\n}\n\nexport function isQueryKey(value: any): value is QueryKey {\n  return typeof value === 'string' || Array.isArray(value)\n}\n\nexport function isError(value: any): value is Error {\n  return value instanceof Error\n}\n\nexport function sleep(timeout: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, timeout)\n  })\n}\n\n/**\n * Schedules a microtask.\n * This can be useful to schedule state updates after rendering.\n */\nexport function scheduleMicrotask(callback: () => void): void {\n  Promise.resolve()\n    .then(callback)\n    .catch(error =>\n      setTimeout(() => {\n        throw error\n      })\n    )\n}\n","import { noop } from './utils'\n\n// TYPES\n\nexport interface Logger {\n  log: LogFunction\n  warn: LogFunction\n  error: LogFunction\n}\n\ntype LogFunction = (...args: any[]) => void\n\n// FUNCTIONS\n\nlet logger: Logger = console || {\n  error: noop,\n  warn: noop,\n  log: noop,\n}\n\nexport function getLogger(): Logger {\n  return logger\n}\n\nexport function setLogger(newLogger: Logger) {\n  logger = newLogger\n}\n","import type { QueryClient } from '../core/queryClient'\nimport type { Query, QueryState } from '../core/query'\nimport type {\n  MutationKey,\n  MutationOptions,\n  QueryKey,\n  QueryOptions,\n} from '../core/types'\nimport type { Mutation, MutationState } from '../core/mutation'\n\n// TYPES\n\nexport interface DehydrateOptions {\n  dehydrateMutations?: boolean\n  dehydrateQueries?: boolean\n  shouldDehydrateMutation?: ShouldDehydrateMutationFunction\n  shouldDehydrateQuery?: ShouldDehydrateQueryFunction\n}\n\nexport interface HydrateOptions {\n  defaultOptions?: {\n    queries?: QueryOptions\n    mutations?: MutationOptions\n  }\n}\n\ninterface DehydratedMutation {\n  mutationKey?: MutationKey\n  state: MutationState\n}\n\ninterface DehydratedQuery {\n  queryHash: string\n  queryKey: QueryKey\n  state: QueryState\n}\n\nexport interface DehydratedState {\n  mutations: DehydratedMutation[]\n  queries: DehydratedQuery[]\n}\n\nexport type ShouldDehydrateQueryFunction = (query: Query) => boolean\n\nexport type ShouldDehydrateMutationFunction = (mutation: Mutation) => boolean\n\n// FUNCTIONS\n\nfunction dehydrateMutation(mutation: Mutation): DehydratedMutation {\n  return {\n    mutationKey: mutation.options.mutationKey,\n    state: mutation.state,\n  }\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery(query: Query): DehydratedQuery {\n  return {\n    state: query.state,\n    queryKey: query.queryKey,\n    queryHash: query.queryHash,\n  }\n}\n\nfunction defaultShouldDehydrateMutation(mutation: Mutation) {\n  return mutation.state.isPaused\n}\n\nfunction defaultShouldDehydrateQuery(query: Query) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  client: QueryClient,\n  options?: DehydrateOptions\n): DehydratedState {\n  options = options || {}\n\n  const mutations: DehydratedMutation[] = []\n  const queries: DehydratedQuery[] = []\n\n  if (options?.dehydrateMutations !== false) {\n    const shouldDehydrateMutation =\n      options.shouldDehydrateMutation || defaultShouldDehydrateMutation\n\n    client\n      .getMutationCache()\n      .getAll()\n      .forEach(mutation => {\n        if (shouldDehydrateMutation(mutation)) {\n          mutations.push(dehydrateMutation(mutation))\n        }\n      })\n  }\n\n  if (options?.dehydrateQueries !== false) {\n    const shouldDehydrateQuery =\n      options.shouldDehydrateQuery || defaultShouldDehydrateQuery\n\n    client\n      .getQueryCache()\n      .getAll()\n      .forEach(query => {\n        if (shouldDehydrateQuery(query)) {\n          queries.push(dehydrateQuery(query))\n        }\n      })\n  }\n\n  return { mutations, queries }\n}\n\nexport function hydrate(\n  client: QueryClient,\n  dehydratedState: unknown,\n  options?: HydrateOptions\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const mutationCache = client.getMutationCache()\n  const queryCache = client.getQueryCache()\n\n  const mutations = (dehydratedState as DehydratedState).mutations || []\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  mutations.forEach(dehydratedMutation => {\n    mutationCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.mutations,\n        mutationKey: dehydratedMutation.mutationKey,\n      },\n      dehydratedMutation.state\n    )\n  })\n\n  queries.forEach(dehydratedQuery => {\n    const query = queryCache.get(dehydratedQuery.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query) {\n      if (query.state.dataUpdatedAt < dehydratedQuery.state.dataUpdatedAt) {\n        query.setState(dehydratedQuery.state)\n      }\n      return\n    }\n\n    // Restore query\n    queryCache.build(\n      client,\n      {\n        ...options?.defaultOptions?.queries,\n        queryKey: dehydratedQuery.queryKey,\n        queryHash: dehydratedQuery.queryHash,\n      },\n      dehydratedQuery.state\n    )\n  })\n}\n","import { QueryClient } from '../core'\nimport { getLogger } from '../core/logger'\nimport { dehydrate, DehydratedState, hydrate } from '../hydration'\nimport { Promisable } from 'type-fest'\n\nexport interface Persistor {\n  persistClient(persistClient: PersistedClient): Promisable<void>\n  restoreClient(): Promisable<PersistedClient | undefined>\n  removeClient(): Promisable<void>\n}\n\nexport interface PersistedClient {\n  timestamp: number\n  buster: string\n  clientState: DehydratedState\n}\n\nexport interface PersistQueryClientOptions {\n  /** The QueryClient to persist */\n  queryClient: QueryClient\n  /** The Persistor interface for storing and restoring the cache\n   * to/from a persisted location */\n  persistor: Persistor\n  /** The max-allowed age of the cache.\n   * If a persisted cache is found that is older than this\n   * time, it will be discarded */\n  maxAge?: number\n  /** A unique string that can be used to forcefully\n   * invalidate existing caches if they do not share the same buster string */\n  buster?: string\n}\n\nexport async function persistQueryClient({\n  queryClient,\n  persistor,\n  maxAge = 1000 * 60 * 60 * 24,\n  buster = '',\n}: PersistQueryClientOptions) {\n  if (typeof window !== 'undefined') {\n    // Subscribe to changes\n    const saveClient = () => {\n      const persistClient: PersistedClient = {\n        buster,\n        timestamp: Date.now(),\n        clientState: dehydrate(queryClient),\n      }\n\n      persistor.persistClient(persistClient)\n    }\n\n    // Attempt restore\n    try {\n      const persistedClient = await persistor.restoreClient()\n\n      if (persistedClient) {\n        if (persistedClient.timestamp) {\n          const expired = Date.now() - persistedClient.timestamp > maxAge\n          const busted = persistedClient.buster !== buster\n          if (expired || busted) {\n            persistor.removeClient()\n          } else {\n            hydrate(queryClient, persistedClient.clientState)\n          }\n        } else {\n          persistor.removeClient()\n        }\n      }\n    } catch (err) {\n      getLogger().error(err)\n      getLogger().warn(\n        'Encountered an error attempting to restore client cache from persisted location. As a precaution, the persisted cache will be discarded.'\n      )\n      persistor.removeClient()\n    }\n\n    // Subscribe to changes in the query cache to trigger the save\n    queryClient.getQueryCache().subscribe(saveClient)\n  }\n}\n"],"names":["_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","noop","undefined","logger","console","error","warn","log","getLogger","dehydrateMutation","mutation","mutationKey","options","state","dehydrateQuery","query","queryKey","queryHash","defaultShouldDehydrateMutation","isPaused","defaultShouldDehydrateQuery","status","dehydrate","client","mutations","queries","dehydrateMutations","shouldDehydrateMutation","getMutationCache","getAll","forEach","push","dehydrateQueries","shouldDehydrateQuery","getQueryCache","hydrate","dehydratedState","mutationCache","queryCache","dehydratedMutation","build","defaultOptions","dehydratedQuery","get","dataUpdatedAt","setState","value","then","direct","Promise","resolve","body","recover","result","e","f","args","reject","persistQueryClient","queryClient","persistor","maxAge","buster","window","saveClient","persistClient","timestamp","Date","now","clientState","restoreClient","persistedClient","expired","busted","removeClient","err","subscribe"],"mappings":"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"}