var _excluded = ["title", "subtitle", "button", "isLoading", "items", "customRowComponent"];

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 *
 * List
 *
 */
import React from 'react';
import PropTypes from 'prop-types';
import { List as ListCompo, ListHeader, Padded } from '@buffetjs/core';
import { Card } from '@buffetjs/styles';

function List(_ref) {
  var title = _ref.title,
      subtitle = _ref.subtitle,
      button = _ref.button,
      isLoading = _ref.isLoading,
      items = _ref.items,
      customRowComponent = _ref.customRowComponent,
      props = _objectWithoutProperties(_ref, _excluded);

  return /*#__PURE__*/React.createElement(Card, props, /*#__PURE__*/React.createElement(Padded, {
    right: true,
    left: true,
    size: "md"
  }, /*#__PURE__*/React.createElement(ListHeader, {
    title: title,
    subtitle: subtitle,
    button: button
  })), /*#__PURE__*/React.createElement(ListCompo, {
    items: items,
    isLoading: isLoading,
    customRowComponent: customRowComponent
  }));
}

List.defaultProps = {
  button: null,
  customRowComponent: null,
  isLoading: false,
  items: [],
  title: null,
  subtitle: null
};
List.propTypes = {
  button: PropTypes.shape({
    color: PropTypes.string,
    icon: PropTypes.bool,
    type: PropTypes.string
  }),
  customRowComponent: PropTypes.func,
  isLoading: PropTypes.bool,
  items: PropTypes.instanceOf(Array),
  subtitle: PropTypes.string,
  title: PropTypes.string
};
export default List;