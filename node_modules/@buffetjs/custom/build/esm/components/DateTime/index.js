var _excluded = ["disabled", "name", "onChange", "value", "tabIndex", "step"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 *
 * DateTime
 *
 */
import React, { useState, useEffect } from 'react';
import moment from 'moment';
import PropTypes from 'prop-types';
import momentPropTypes from 'react-moment-proptypes';
import { isEmpty, cloneDeep } from 'lodash';
import { DatePicker, TimePicker } from '@buffetjs/core';
import Wrapper from './Wrapper';
var UNITS = ['hour', 'minute', 'second'];
export var getTimeString = function getTimeString(time) {
  if (!time) {
    return '';
  }

  var currTime = time || moment();
  var timeObj = getTimeObject(currTime);
  var timeString = Object.keys(timeObj).map(function (key) {
    return timeObj[key] < 10 ? "0".concat(timeObj[key]) : timeObj[key];
  }).join(':');
  return timeString;
};
export var getTimeObject = function getTimeObject(time) {
  var timeObj = {};
  UNITS.forEach(function (unit) {
    timeObj[unit] = time.get(unit);
  });
  return timeObj;
};

function DateTime(_ref) {
  var disabled = _ref.disabled,
      name = _ref.name,
      onChange = _ref.onChange,
      value = _ref.value,
      tabIndex = _ref.tabIndex,
      step = _ref.step,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(null),
      _useState2 = _slicedToArray(_useState, 2),
      timestamp = _useState2[0],
      setTimestamp = _useState2[1];

  var setData = function setData(time) {
    var _time$split = time.split(':'),
        _time$split2 = _slicedToArray(_time$split, 3),
        hour = _time$split2[0],
        minute = _time$split2[1],
        second = _time$split2[2];

    var timeObj = {
      hour: hour,
      minute: minute,
      second: second
    };
    var currentDate = isEmpty(timestamp) ? moment() : cloneDeep(timestamp);
    currentDate.set('hours', timeObj.hour);
    currentDate.set('minute', timeObj.minute);
    currentDate.set('second', timeObj.second);
    setDate(currentDate);
  };

  var setDate = function setDate(date, time) {
    // Clearing the date
    if (date === null) {
      setTimestamp(null);
      onChange({
        target: {
          name: name,
          type: 'datetime',
          value: null
        }
      });
      return;
    }

    var newDate = time || date;
    date.set(getTimeObject(newDate));
    date.toISOString();
    date.format();
    setTimestamp(date);
    onChange({
      target: {
        name: name,
        type: 'datetime',
        value: date
      }
    });
  };

  useEffect(function () {
    if (!!value && moment(value).isValid()) {
      var newDate = value._isAMomentObject === true ? value : moment(value);
      setTimestamp(newDate);
    }
  }, [value]);
  return /*#__PURE__*/React.createElement(Wrapper, null, /*#__PURE__*/React.createElement(DatePicker, _extends({}, rest, {
    name: "datetime",
    disabled: disabled,
    onChange: function onChange(_ref2) {
      var target = _ref2.target;
      setDate(target.value, timestamp);
    },
    tabIndex: tabIndex,
    value: timestamp
  })), /*#__PURE__*/React.createElement(TimePicker, {
    name: "time",
    disabled: disabled,
    onChange: function onChange(_ref3) {
      var target = _ref3.target;
      setData(target.value);
    },
    seconds: false,
    tabIndex: tabIndex,
    value: getTimeString(timestamp) || '',
    step: step
  }));
}

DateTime.defaultProps = {
  autoFocus: false,
  disabled: false,
  id: null,
  onChange: function onChange() {},
  placeholder: null,
  tabIndex: '0',
  value: null,
  withDefaultValue: false,
  step: 30
};
DateTime.propTypes = {
  autoFocus: PropTypes.bool,
  disabled: PropTypes.bool,
  id: PropTypes.string,
  name: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  placeholder: PropTypes.string,
  step: PropTypes.number,
  tabIndex: PropTypes.string,
  value: PropTypes.oneOfType([momentPropTypes.momentObj, PropTypes.string, PropTypes.instanceOf(Date)]),
  withDefaultValue: PropTypes.bool
};
export default DateTime;