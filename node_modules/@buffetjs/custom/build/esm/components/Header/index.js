function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 *
 * Header
 *
 */
import React, { useEffect, useRef, useState } from 'react';
import PropTypes from 'prop-types';
import { HeaderTitle, HeaderActions } from '@buffetjs/core';
import { Header as Wrapper, LoadingBar } from '@buffetjs/styles';

function Header(_ref) {
  var actions = _ref.actions,
      content = _ref.content,
      isLoading = _ref.isLoading,
      stickable = _ref.stickable,
      title = _ref.title;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isHeaderSticky = _useState2[0],
      setHeaderSticky = _useState2[1];

  var headerRef = useRef(null);
  var label = title.label,
      cta = title.cta;

  var handleScroll = function handleScroll() {
    if (headerRef.current) {
      setHeaderSticky(headerRef.current.getBoundingClientRect().top <= 20);
    }
  };

  useEffect(function () {
    window.addEventListener('scroll', handleScroll);
    return function () {
      window.removeEventListener('scroll', function () {
        return handleScroll;
      });
    };
  }, []);
  return /*#__PURE__*/React.createElement(Wrapper, {
    ref: headerRef
  }, /*#__PURE__*/React.createElement("div", {
    className: "sticky-wrapper".concat(isHeaderSticky && stickable ? ' sticky' : '')
  }, /*#__PURE__*/React.createElement("div", {
    className: "row"
  }, /*#__PURE__*/React.createElement("div", {
    className: "col-sm-6 header-title"
  }, /*#__PURE__*/React.createElement(HeaderTitle, {
    title: label,
    cta: cta
  }), isLoading ? /*#__PURE__*/React.createElement(LoadingBar, null) : /*#__PURE__*/React.createElement("p", null, content)), /*#__PURE__*/React.createElement("div", {
    className: "col-sm-6 justify-content-end"
  }, /*#__PURE__*/React.createElement(HeaderActions, {
    actions: actions
  })))));
}

Header.defaultProps = {
  actions: [],
  content: null,
  isLoading: false,
  stickable: true,
  title: {
    label: null,
    cta: null
  }
};
Header.propTypes = {
  actions: PropTypes.arrayOf(PropTypes.shape({
    onClick: PropTypes.func,
    title: PropTypes.string
  })),
  content: PropTypes.string,
  isLoading: PropTypes.bool,
  stickable: PropTypes.bool,
  title: PropTypes.shape({
    cta: PropTypes.shape({
      icon: PropTypes.string,
      onClick: PropTypes.func
    }),
    label: PropTypes.string
  })
};
export default Header;