"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@buffetjs/styles");

var _TableHeader = _interopRequireDefault(require("../TableHeader"));

var _TableRow = _interopRequireDefault(require("../TableRow"));

var _ActionCollapse = _interopRequireDefault(require("./ActionCollapse"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function Table(_ref) {
  var bulkActionProps = _ref.bulkActionProps,
      className = _ref.className,
      customRow = _ref.customRow,
      headers = _ref.headers,
      isLoading = _ref.isLoading,
      onChangeSort = _ref.onChangeSort,
      onClickRow = _ref.onClickRow,
      _onSelect = _ref.onSelect,
      onSelectAll = _ref.onSelectAll,
      rows = _ref.rows,
      rowLinks = _ref.rowLinks,
      showActionCollapse = _ref.showActionCollapse,
      sortBy = _ref.sortBy,
      sortOrder = _ref.sortOrder,
      tableEmptyText = _ref.tableEmptyText,
      withBulkAction = _ref.withBulkAction;
  var colSpan = withBulkAction ? headers.length + 1 : headers.length;

  if (rowLinks.length > 0) {
    colSpan += 1;
  }

  var areAllEntriesSelected = rows.length > 0 && rows.some(function (row) {
    return row._isChecked === true;
  });
  var shouldDisplayEmptyRow = rows.length === 0 && !isLoading;
  return _react["default"].createElement(_styles.Table, {
    className: className
  }, _react["default"].createElement("table", {
    className: ""
  }, _react["default"].createElement(_TableHeader["default"], {
    headers: headers,
    onChangeSort: onChangeSort,
    onSelectAll: onSelectAll,
    rows: rows,
    shouldAddCell: rowLinks.length > 0,
    sortBy: sortBy,
    sortOrder: sortOrder,
    withBulkAction: withBulkAction
  }), _react["default"].createElement("tbody", null, withBulkAction && areAllEntriesSelected && showActionCollapse && _react["default"].createElement(_ActionCollapse["default"], _extends({
    colSpan: colSpan,
    numberOfSelectedEntries: rows.filter(function (row) {
      return row._isChecked === true;
    }).length
  }, bulkActionProps)), isLoading && _react["default"].createElement(_styles.TableRowEmpty, {
    isLoading: true
  }, _react["default"].createElement("td", {
    colSpan: colSpan
  }, _react["default"].createElement(_styles.LoadingIndicator, null))), shouldDisplayEmptyRow && _react["default"].createElement(_styles.TableRowEmpty, null, _react["default"].createElement("td", {
    colSpan: colSpan
  }, tableEmptyText)), !shouldDisplayEmptyRow && rows.map(function (row, index) {
    var key = row.id || "key".concat(index);

    if (customRow) {
      var Row = customRow;
      return _react["default"].createElement(_react["default"].Fragment, {
        key: JSON.stringify(row)
      }, _react["default"].createElement(Row, {
        row: row,
        headers: headers,
        onSelect: _onSelect
      }));
    }

    return _react["default"].createElement(_TableRow["default"], {
      key: key,
      headers: headers,
      onClick: onClickRow,
      onSelect: function onSelect() {
        _onSelect(row, index);
      },
      row: row,
      rowLinks: rowLinks,
      withBulkAction: withBulkAction
    });
  }))));
}

Table.defaultProps = {
  bulkActionProps: {
    icon: 'trash',
    onConfirm: function onConfirm() {},
    translatedNumberOfEntry: 'entry',
    translatedNumberOfEntries: 'entries',
    translatedAction: 'Delete all'
  },
  className: null,
  customRow: null,
  headers: [],
  isLoading: false,
  onChangeSort: function onChangeSort() {},
  onClickRow: function onClickRow() {},
  onSelect: function onSelect() {},
  onSelectAll: function onSelectAll() {},
  rows: [],
  rowLinks: [],
  showActionCollapse: false,
  sortBy: null,
  sortOrder: 'asc',
  tableEmptyText: 'There is no data',
  withBulkAction: false
};
Table.propTypes = {
  bulkActionProps: _propTypes["default"].shape({
    icon: _propTypes["default"].string,
    onConfirm: _propTypes["default"].func,
    translatedAction: _propTypes["default"].string,
    translatedNumberOfEntries: _propTypes["default"].string,
    translatedNumberOfEntry: _propTypes["default"].string
  }),
  className: _propTypes["default"].string,
  customRow: _propTypes["default"].func,
  headers: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    isSortEnabled: _propTypes["default"].bool,
    name: _propTypes["default"].string,
    value: _propTypes["default"].string
  })),
  isLoading: _propTypes["default"].bool,
  onChangeSort: _propTypes["default"].func,
  onClickRow: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  onSelectAll: _propTypes["default"].func,
  rowLinks: _propTypes["default"].instanceOf(Array),
  rows: _propTypes["default"].instanceOf(Array),
  showActionCollapse: _propTypes["default"].bool,
  sortBy: _propTypes["default"].string,
  sortOrder: _propTypes["default"].string,
  tableEmptyText: _propTypes["default"].string,
  withBulkAction: _propTypes["default"].bool
};
var _default = Table;
exports["default"] = _default;