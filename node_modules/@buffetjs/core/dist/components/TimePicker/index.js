"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.timeFormatter = void 0;

var _react = _interopRequireWildcard(require("react"));

var _lodash = require("lodash");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _styles = require("@buffetjs/styles");

var _hooks = require("@buffetjs/hooks");

var _Icon = _interopRequireDefault(require("../Icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

var MINUTES_IN_HOUR = 60;

var pad = function pad(num) {
  return "0".concat(num).substr(-2);
};

var timeFormatter = function timeFormatter(time) {
  var newTime = Array(3).fill('00').concat(splitArray(time)).reverse();
  newTime.length = 3;
  return format(newTime).join(':');
};

exports.timeFormatter = timeFormatter;

var splitArray = function splitArray(string) {
  if ((0, _lodash.isInteger)((0, _lodash.toNumber)(string)) && string) {
    var stringFormat = string.length === 3 ? "0".concat(string) : string;
    return stringFormat.match(/.{1,2}/g).reverse();
  }

  var lowercase = string ? string.toLowerCase() : '0';
  var array = lowercase.includes('h') ? lowercase.split('h') : lowercase.split(':');
  return array.reverse().filter(function (v) {
    return !!v;
  });
};

var format = function format(array) {
  return array.map(function (string, i) {
    if (string.length < 2) {
      return i === 0 ? "0".concat(string) : "".concat(string, "0");
    }

    return string;
  });
};

var _short = function _short(hour) {
  var array = hour.split(':');

  if (array.length > 2) {
    return array.slice(0, -1).join(':');
  }

  return hour;
};

var getMinutesArr = function getMinutesArr(step) {
  var length = MINUTES_IN_HOUR / step;
  return Array.from({
    length: length
  }, function (_v, i) {
    return step * i;
  });
};

var getOptions = function getOptions(step) {
  var hours = Array.from({
    length: 24
  }, function (_, i) {
    return i;
  });
  var minutes = getMinutesArr(step);
  var options = hours.reduce(function (acc, cur) {
    var hour = pad(cur);
    var hourOptions = minutes.map(function (minute) {
      var label = "".concat(hour, ":").concat(pad(minute));
      return {
        value: "".concat(label, ":00"),
        label: label
      };
    });
    return acc.concat(hourOptions);
  }, []);
  return options;
};

var roundHour = function roundHour(time, step) {
  var arr = splitArray(time);
  var minutesArr = getMinutesArr(step);
  var nearMin = nearest(minutesArr.concat(MINUTES_IN_HOUR), parseInt(arr[1], 10));
  arr[1] = minutesArr.includes(arr[1]) ? '00' : pad(nearMin);
  arr[2] = nearMin === 60 ? "".concat(parseInt(arr[2], 10) + 1) : arr[2];
  return format(arr.reverse()).join(':');
};

var nearest = function nearest(arr, val) {
  return arr.reduce(function (p, n) {
    return Math.abs(p) > Math.abs(n - val) ? n - val : p;
  }, Infinity) + val;
};

function TimePicker(props) {
  var name = props.name,
      onChange = props.onChange,
      seconds = props.seconds,
      tabIndex = props.tabIndex,
      value = props.value,
      step = props.step;

  var _useState = (0, _react.useState)(''),
      _useState2 = _slicedToArray(_useState, 2),
      inputVal = _useState2[0],
      setInputVal = _useState2[1];

  var _useState3 = (0, _react.useState)(false),
      _useState4 = _slicedToArray(_useState3, 2),
      isOpen = _useState4[0],
      setIsOpen = _useState4[1];

  var options = (0, _react.useMemo)(function () {
    return getOptions(step);
  }, [step]);
  var inputRef = (0, _react.useRef)();
  var wrapperRef = (0, _react.useRef)();
  var listRef = (0, _react.useRef)();
  var listRefs = options.reduce(function (acc, curr) {
    acc[curr.value] = (0, _react.useRef)();
    return acc;
  }, {});
  var currentTimeSelected = (0, _react.useMemo)(function () {
    return roundHour(timeFormatter(inputVal), step);
  }, [inputVal, step]);
  (0, _react.useEffect)(function () {
    if (!isOpen) {
      var time = seconds ? value : _short(value);
      setInputVal(time);
    }
  }, [value, seconds, isOpen]);
  (0, _react.useEffect)(function () {
    var currentRef = currentTimeSelected;

    if (isOpen && listRefs[currentRef]) {
      listRef.current.scrollTop = listRefs[currentRef].current.offsetTop;
    }
  }, [isOpen, currentTimeSelected, listRefs]);
  (0, _hooks.useEventListener)('click', function (event) {
    if (!wrapperRef.current.contains(event.target)) {
      setIsOpen(false);
    }
  }, isOpen);
  (0, _hooks.useShortcutEffect)('arrowUp', function () {
    if (isOpen) {
      var currentIndex = options.findIndex(function (o) {
        return o.value === currentTimeSelected;
      });
      if (!currentIndex) return;
      var nextIndex = currentIndex - 1;
      var nextTime = options[nextIndex] || options[currentIndex];
      updateTime(nextTime.value);
    }
  }, isOpen);
  (0, _hooks.useShortcutEffect)('arrowDown', function () {
    if (isOpen) {
      var currentIndex = options.findIndex(function (o) {
        return o.value === currentTimeSelected;
      });
      var lastIndex = options.length - 1;
      if (currentIndex >= lastIndex) return;
      var nextIndex = currentIndex + 1;
      var nextTime = options[nextIndex] || options[lastIndex];
      updateTime(nextTime.value);
    }
  }, isOpen);
  (0, _hooks.useShortcutEffect)('enter', function () {
    if (isOpen) {
      setIsOpen(false);
      inputRef.current.blur();
    }
  }, isOpen);
  (0, _hooks.useShortcutEffect)('tab', function () {
    if (isOpen) {
      setIsOpen(false);
      inputRef.current.blur();
    }
  }, isOpen);

  var handleChange = function handleChange(_ref) {
    var target = _ref.target;
    updateTime(target.value);
  };

  var handleChangeRadio = (0, _react.useCallback)(function () {}, []);

  var formatInputValue = function formatInputValue(time) {
    if (!seconds) {
      setInputVal(_short(time));
    } else {
      setInputVal(time);
    }
  };

  var handleClick = function handleClick(_ref2) {
    var target = _ref2.target;
    updateTime(target.value);
    setIsOpen(false);
  };

  var updateTime = function updateTime(time) {
    formatInputValue(time);
    onChange({
      target: {
        name: name,
        type: 'time',
        value: timeFormatter(time)
      }
    });
  };

  return _react["default"].createElement(_styles.TimePickerWrapper, {
    ref: wrapperRef,
    className: props.className
  }, _react["default"].createElement(_styles.TimePicker, _extends({}, props, {
    autoComplete: "off",
    onChange: handleChange,
    onFocus: function onFocus() {
      return setIsOpen(true);
    },
    ref: inputRef,
    type: "text",
    value: inputVal,
    tabIndex: tabIndex
  })), _react["default"].createElement(_styles.IconWrapper, null, _react["default"].createElement(_Icon["default"], {
    icon: "time"
  })), _react["default"].createElement(_styles.TimeList, {
    className: isOpen && 'displayed',
    ref: listRef
  }, isOpen && options.map(function (option) {
    return _react["default"].createElement("li", {
      key: option.value,
      ref: listRefs[option.value]
    }, _react["default"].createElement("input", {
      type: "radio",
      onChange: handleChangeRadio,
      onClick: handleClick,
      value: option.value,
      id: option.value,
      name: "time",
      checked: option.value === currentTimeSelected,
      tabIndex: "0"
    }), _react["default"].createElement("label", {
      htmlFor: option.value
    }, option.label));
  })));
}

TimePicker.defaultProps = {
  className: null,
  onChange: function onChange() {},
  tabIndex: '0',
  seconds: false,
  value: '',
  step: 30
};
TimePicker.propTypes = {
  className: _propTypes["default"].string,
  name: _propTypes["default"].string.isRequired,
  onChange: _propTypes["default"].func,
  seconds: _propTypes["default"].bool,
  step: function step(props, propName) {
    return MINUTES_IN_HOUR % props[propName] > 0 && new Error('step should be divisible by 60');
  },
  tabIndex: _propTypes["default"].string,
  value: _propTypes["default"].string
};
var _default = TimePicker;
exports["default"] = _default;