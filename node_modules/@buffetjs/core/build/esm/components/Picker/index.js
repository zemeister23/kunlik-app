function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

import React, { useState, useRef } from 'react';
import PropTypes from 'prop-types';
import { useClickAwayListener } from '@buffetjs/hooks';
import PickerButton from './PickerButton';
import PickerSection from './PickerSection';
import PickerWrapper from './PickerWrapper';

var Picker = function Picker(_ref) {
  var position = _ref.position,
      renderButtonContent = _ref.renderButtonContent,
      renderSectionContent = _ref.renderSectionContent;

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      isOpen = _useState2[0],
      setIsOpen = _useState2[1];

  var dropdownRef = useRef();
  useClickAwayListener(dropdownRef, function () {
    return setIsOpen(false);
  });

  var handleToggle = function handleToggle() {
    setIsOpen(function (v) {
      return !v;
    });
  };

  return /*#__PURE__*/React.createElement(PickerWrapper, {
    ref: dropdownRef
  }, /*#__PURE__*/React.createElement(PickerButton, {
    onClick: handleToggle,
    isActive: isOpen
  }, renderButtonContent(isOpen)), /*#__PURE__*/React.createElement(PickerSection, {
    isOpen: isOpen,
    position: position
  }, renderSectionContent(handleToggle)));
};

Picker.defaultProps = {
  position: 'left',
  renderButtonContent: function renderButtonContent() {},
  renderSectionContent: function renderSectionContent() {}
};
Picker.propTypes = {
  position: PropTypes.oneOf(['left', 'right']),
  renderButtonContent: PropTypes.func,
  renderSectionContent: PropTypes.func
};
export default Picker;