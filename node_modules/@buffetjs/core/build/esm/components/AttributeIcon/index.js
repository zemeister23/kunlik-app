var _excluded = ["type"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import React from 'react';
import PropTypes from 'prop-types';
import { Bool, Calendar, Component, ContentType, DynamicZone, Email, Enumeration, Json, Media, NumberIcon, Password, Relation, RichText, SingleType, Text, Uid } from '@buffetjs/icons';
import Div from './Div';
var types = {
  biginteger: NumberIcon,
  "boolean": Bool,
  component: Component,
  contentType: ContentType,
  date: Calendar,
  datetime: Calendar,
  decimal: NumberIcon,
  dynamiczone: DynamicZone,
  email: Email,
  "enum": Enumeration,
  enumeration: Enumeration,
  file: Media,
  files: Media,
  "float": NumberIcon,
  integer: NumberIcon,
  json: Json,
  JSON: Json,
  media: Media,
  number: NumberIcon,
  password: Password,
  relation: Relation,
  richtext: RichText,
  singleType: SingleType,
  string: Text,
  text: Text,
  time: Calendar,
  timestamp: Calendar,
  uid: Uid
};

var AttributeIcon = function AttributeIcon(_ref) {
  var type = _ref.type,
      rest = _objectWithoutProperties(_ref, _excluded);

  var Compo = types[type];

  if (!types[type]) {
    return null;
  }

  return /*#__PURE__*/React.createElement(Div, _extends({}, rest, {
    type: type
  }), /*#__PURE__*/React.createElement(Compo, null));
};

AttributeIcon.propTypes = {
  type: PropTypes.string.isRequired
};
export default AttributeIcon;