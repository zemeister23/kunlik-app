var _excluded = ["children", "color", "disabled", "icon", "label", "isLoading"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 *
 * Button
 *
 */
import React from 'react';
import PropTypes from 'prop-types';
import { LoadingIndicator, Button as StyledButton, colors } from '@buffetjs/styles';
import { Plus } from '@buffetjs/icons';
import Flex from '../Flex';
import PrefixIcon from '../PrefixIcon';

function Button(_ref) {
  var children = _ref.children,
      color = _ref.color,
      disabled = _ref.disabled,
      icon = _ref.icon,
      label = _ref.label,
      isLoading = _ref.isLoading,
      rest = _objectWithoutProperties(_ref, _excluded);

  var content = label || children;
  var img = icon === true ? /*#__PURE__*/React.createElement(Plus, {
    height: "11px",
    width: "11px",
    fill: "".concat(colors.button[color].color)
  }) : /*#__PURE__*/React.createElement(PrefixIcon, {
    icon: icon
  });

  if (isLoading) {
    return /*#__PURE__*/React.createElement(StyledButton, _extends({
      color: color,
      disabled: disabled
    }, rest, {
      onClick: function onClick(e) {
        // Preventing the user from clicking the button when loading
        e.preventDefault();
      }
    }), /*#__PURE__*/React.createElement(Flex, {
      justifyContent: "space-around"
    }, /*#__PURE__*/React.createElement(LoadingIndicator, {
      animationTime: "0.6s",
      borderWidth: "2px",
      borderColor: "#f7f5f0",
      borderTopColor: "#d1cec7",
      size: "1.3rem"
    })));
  }

  return /*#__PURE__*/React.createElement(StyledButton, _extends({
    color: color,
    disabled: disabled
  }, rest), img, content);
}

Button.defaultProps = {
  children: null,
  color: 'primary',
  disabled: false,
  icon: false,
  isLoading: false,
  label: null,
  type: 'button'
};
Button.propTypes = {
  children: PropTypes.node,
  color: PropTypes.oneOf(['primary', 'secondary', 'cancel', 'success', 'delete', 'none']),
  disabled: PropTypes.bool,
  icon: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),
  isLoading: PropTypes.bool,
  label: PropTypes.string,
  type: PropTypes.oneOf(['submit', 'reset', 'button', 'menu'])
};
export default Button;