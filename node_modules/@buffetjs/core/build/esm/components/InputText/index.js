var _excluded = ["autoFocus", "className", "icon", "id", "name", "onChange", "tabIndex", "type", "value"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]; if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 *
 * InputText
 *
 */
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { IconWrapper, InputText as Input, InputWrapper } from '@buffetjs/styles';
import Icon from '../Icon';
import PrefixIcon from './PrefixIcon';

function InputText(_ref) {
  var autoFocus = _ref.autoFocus,
      className = _ref.className,
      icon = _ref.icon,
      id = _ref.id,
      name = _ref.name,
      onChange = _ref.onChange,
      tabIndex = _ref.tabIndex,
      type = _ref.type,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, _excluded);

  var _useState = useState(false),
      _useState2 = _slicedToArray(_useState, 2),
      showPassword = _useState2[0],
      togglePassword = _useState2[1];

  return /*#__PURE__*/React.createElement(InputWrapper, {
    className: className
  }, /*#__PURE__*/React.createElement(PrefixIcon, {
    icon: icon,
    type: type
  }), type === 'password' && /*#__PURE__*/React.createElement("button", {
    type: "button",
    onClick: function onClick() {
      return togglePassword(!showPassword);
    },
    className: showPassword ? 'shown' : '',
    tabIndex: "-1"
  }, /*#__PURE__*/React.createElement(IconWrapper, {
    background: false
  }, /*#__PURE__*/React.createElement(Icon, {
    icon: type
  }))), /*#__PURE__*/React.createElement(Input, _extends({
    autoFocus: autoFocus,
    id: id || name,
    name: name,
    onChange: onChange,
    tabIndex: tabIndex,
    type: showPassword ? 'text' : type,
    value: value,
    icon: icon
  }, rest)));
}

InputText.defaultProps = {
  autoComplete: 'off',
  autoFocus: false,
  className: null,
  icon: null,
  id: null,
  onChange: function onChange() {},
  placeholder: null,
  tabIndex: '0',
  type: 'text',
  value: ''
};
InputText.propTypes = {
  autoComplete: PropTypes.string,
  autoFocus: PropTypes.bool,
  className: PropTypes.string,
  icon: PropTypes.node,
  id: PropTypes.string,
  name: PropTypes.string.isRequired,
  onChange: PropTypes.func,
  placeholder: PropTypes.string,
  tabIndex: PropTypes.string,
  type: PropTypes.string,
  value: PropTypes.string
};
export default InputText;