var _excluded = ["autoFocus", "id", "name", "onChange", "options", "tabIndex", "value"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

/**
 *
 * Select
 *
 */
import React from 'react';
import PropTypes from 'prop-types';
import invariant from 'invariant';
import { Select as StyledSelect } from '@buffetjs/styles';

function Select(_ref) {
  var autoFocus = _ref.autoFocus,
      id = _ref.id,
      name = _ref.name,
      onChange = _ref.onChange,
      options = _ref.options,
      tabIndex = _ref.tabIndex,
      value = _ref.value,
      rest = _objectWithoutProperties(_ref, _excluded);

  var lengthOfReactElementsInOptions = options.filter(function (option) {
    return /*#__PURE__*/React.isValidElement(option);
  }).length;

  var formatOptions = function formatOptions() {
    return options.map(function (option) {
      var optionValue = option; // Type check
      // Use option.value if it is defined (ie. even when it is an empty string)

      if (option && typeof option.value !== 'undefined') {
        optionValue = option.value;
      }

      return /*#__PURE__*/React.createElement("option", {
        key: JSON.stringify(optionValue),
        value: optionValue
      }, option.label || option);
    });
  };

  var renderOptions = function renderOptions() {
    var areOptionsValidReactElements = options.every(function (option) {
      return /*#__PURE__*/React.isValidElement(option);
    });
    return areOptionsValidReactElements ? options : formatOptions();
  };

  if (lengthOfReactElementsInOptions > 0) {
    invariant(lengthOfReactElementsInOptions === options.length, 'You have mixed up React Elements and non React Elements in your options array ');
  }

  return /*#__PURE__*/React.createElement(StyledSelect, _extends({
    autoFocus: autoFocus,
    id: id || name,
    name: name,
    onChange: onChange,
    tabIndex: tabIndex,
    value: value
  }, rest), renderOptions());
}

Select.defaultProps = {
  autoComplete: 'off',
  autoFocus: false,
  id: null,
  options: [],
  placeholder: null,
  tabIndex: '0'
};
Select.propTypes = {
  autoComplete: PropTypes.string,
  autoFocus: PropTypes.bool,
  id: PropTypes.string,
  name: PropTypes.string.isRequired,
  onChange: PropTypes.func.isRequired,
  options: PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.shape({
    label: PropTypes.string,
    value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object])
  }), PropTypes.string, PropTypes.node])),
  placeholder: PropTypes.string,
  tabIndex: PropTypes.string,
  value: PropTypes.oneOfType([PropTypes.string, PropTypes.number, PropTypes.object]).isRequired
};
export default Select;