function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

/**
 *
 * HeaderActions
 *
 */
import React from 'react';
import PropTypes from 'prop-types';
import { HeaderActions as Wrapper } from '@buffetjs/styles';
import Button from '../Button';

function HeaderActions(_ref) {
  var actions = _ref.actions;
  return /*#__PURE__*/React.createElement(Wrapper, null, actions.map(function (action, index) {
    var Component = action.Component,
        disabled = action.disabled,
        label = action.label,
        onClick = action.onClick;

    if (Component) {
      return /*#__PURE__*/React.createElement(Component, _extends({}, action, {
        key: action.key || index
      }));
    }

    return /*#__PURE__*/React.createElement(Button, _extends({
      key: label,
      onClick: onClick,
      disabled: disabled || false
    }, action), label);
  }));
}

HeaderActions.defaultProps = {
  actions: []
};
HeaderActions.propTypes = {
  actions: PropTypes.arrayOf(PropTypes.shape({
    disabled: PropTypes.bool,
    onClick: PropTypes.func,
    title: PropTypes.string
  }))
};
export default HeaderActions;