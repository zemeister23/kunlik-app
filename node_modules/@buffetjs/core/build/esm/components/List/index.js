/**
 *
 * List
 *
 */
import React from 'react';
import PropTypes from 'prop-types';
import { List as StyledList, LoadingIndicator } from '@buffetjs/styles';
import ListRow from '../ListRow';
import Padded from '../Padded';

function List(_ref) {
  var className = _ref.className,
      items = _ref.items,
      isLoading = _ref.isLoading,
      customRowComponent = _ref.customRowComponent;
  return /*#__PURE__*/React.createElement(StyledList, {
    className: className
  }, isLoading ? /*#__PURE__*/React.createElement(Padded, {
    top: true,
    bottom: true,
    size: "md"
  }, /*#__PURE__*/React.createElement(LoadingIndicator, null)) : /*#__PURE__*/React.createElement("table", null, /*#__PURE__*/React.createElement("tbody", null, items.map(function (item, index) {
    return customRowComponent ?
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    React.createElement(React.Fragment, {
      key: index
    }, customRowComponent(item)) :
    /*#__PURE__*/
    // eslint-disable-next-line react/no-array-index-key
    React.createElement(ListRow, {
      cells: item,
      key: index
    });
  }))));
}

List.defaultProps = {
  className: null,
  customRowComponent: null,
  isLoading: false,
  items: []
};
List.propTypes = {
  className: PropTypes.string,
  customRowComponent: PropTypes.func,
  isLoading: PropTypes.bool,
  items: PropTypes.instanceOf(Array)
};
export default List;